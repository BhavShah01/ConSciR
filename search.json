[{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bhavshah01.github.io/ConSciR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using R for the first time","text":"get started R, need install R RStudio, user-friendly interface R. First, download R Comprehensive R Archive Network (CRAN), follow installation instructions operating system. installing R, download RStudio follow prompts complete installation. plenty online resources available guide step. R: https://cloud.r-project.org/ RStudio: https://posit.co/download/rstudio-desktop/ Useful starting point RStudio Education: Finding Way R","code":""},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"loading-a-package-and-basic-introduction-to-rstudio","dir":"Articles","previous_headings":"","what":"Loading a Package and Basic Introduction to RStudio","title":"Using R for the first time","text":"first open RStudio, ’ll see layout multiple panes. main areas Console (can type execute R commands), Source Editor (write edit R scripts), Environment/History pane, Files/Plots/Packages/Help pane.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"loading-a-package-for-the-first-time","dir":"Articles","previous_headings":"Loading a Package and Basic Introduction to RStudio","what":"Loading a Package for the First Time","title":"Using R for the first time","text":"load package R first time, follow two steps: Installing package: Open Console RStudio type: Loading package: installation, load package R session using library() function:","code":"install.packages(\"tidyverse\") library(tidyverse)"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"basic-rstudio-features","dir":"Articles","previous_headings":"Loading a Package and Basic Introduction to RStudio","what":"Basic RStudio Features","title":"Using R for the first time","text":"Creating new R script: Click File > New File > R Script. Running code: Place cursor line code press Ctrl+Enter (Cmd+Enter Mac). Viewing installed packages: bottom-right pane, click “Packages” tab. Getting help: Type ?function_name Console. example: Viewing plots: Created plots appear “Plots” tab bottom-right pane. Managing files: Use “Files” tab bottom-right pane navigate project directory.","code":"?mean"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"tidy-data","dir":"Articles","previous_headings":"","what":"Tidy data","title":"Using R for the first time","text":"ensure optimal functionality ConSciR functions, crucial maintain data tidy consistently formatted structure. allows code easily locate process variables. Please note specific naming conventions columns essential package work correctly. following formats recommended:","code":""},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"temperature-and-relative-humidity-data","dir":"Articles","previous_headings":"Tidy data","what":"Temperature and Relative Humidity Data","title":"Using R for the first time","text":"","code":"#>     Site  Sensor                Date Temp RH #> 1 London Gallery 2023-01-01 00:00:00 20.5 45 #> 2 London Gallery 2023-01-01 01:00:00 21.0 47 #> 3   York    Room 2023-01-01 00:00:00 19.8 50 #> 4   York    Room 2023-01-01 02:00:00 20.2 49"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR-FirstTimeR.html","id":"light-and-uv-data","dir":"Articles","previous_headings":"Tidy data","what":"Light and UV Data","title":"Using R for the first time","text":"Key Points: Column Names: Try use exact column names shown (Site, Sensor, Date, Temp, RH, Lux, UV). names case-sensitive. Tools tidy files developed. Date Format: Date column ideally datetime format (YYYY-MM-DD HH:MM:SS) software attempt interpret date column. Check behaviour dates format hasn’t used. Numeric Data: Ensure Temp, RH, Lux, UV columns contain numeric data. Categorical Data: Site Sensor categorical variables character strings. Tidy Structure: row represents single observation, column represents single variable. Missing Columns: Include relevant columns, even data points missing (leave blank use NA missing values).","code":"#>     Site Sensor                Date Lux UV #> 1 Museum  Store 2023-01-01 00:00:00  45  0 #> 2 Museum  Store 2023-01-01 01:00:00  56  0 #> 3   Case  Shelf 2023-01-01 00:00:00 200 20 #> 4   Case  Shelf 2023-01-01 02:00:00 199 49"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ConSciR","text":"ConSciR provides tools analysis cultural heritage preventive conservation data. includes functions environmental data analysis, humidity calculations, sustainability metrics, conservation risks, data visualisations psychrometric charts. designed support conservators, scientists, engineers streamlining common calculations tasks encountered heritage conservation workflows. package motivated framework outlined Cosaert Beltran et al. (2022) “Tools Analysis Collection Environments” “Tools Analysis Collection Environments”.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"install-and-load","dir":"Articles","previous_headings":"","what":"Install and load","title":"ConSciR","text":"can install development version package GitHub using pak package: Visit package GitHub page updates source code: ConSciR Github vignette provides practical introduction package’s functionalities. full details functions, see package Reference manual use ?function_name within R.","code":"install.packages(\"ConSciR\") library(ConSciR) install.packages(\"pak\") pak::pak(\"BhavShah01/ConSciR\")  # Alternatively # install.packages(\"devtools\") # devtools::install_github(\"BhavShah01/ConSciR\")"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"ConSciR","text":"Load useful packages:","code":"# Load packages library(ConSciR) library(dplyr) library(ggplot2)"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"add-calculated-values","dir":"Articles","previous_headings":"Examples","what":"Add calculated values","title":"ConSciR","text":"Transform dataset functions ConSciR:","code":"filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\") mydata <- mydata |> filter(Sensor == \"Room 1\")   # Add calculated values using mutate head(mydata) |>    mutate(          # Humidity functions     Absolute_Humidity = calcAH(Temp, RH),      Dew_Point = calcDP(Temp, RH),      Mixing_Ratio = calcMR(Temp, RH),      Humidity_Ratio = calcHR(Temp, RH),     Enthalpy = calcEnthalpy(Temp, RH),      Saturation_Vapour_Pressure = calcPws(Temp),      Actual_Vapour_Pressure = calcPw(Temp, RH),      Air_Density = calcAD(Temp, RH),          # Conservation risks     Mould_Growth_Rate_mm_day = calcMould_Zeng(Temp, RH, label = TRUE),     Mould_Growth_Limit = calcMould_Zeng(Temp, RH),      Mould_Growth_Risk = ifelse(RH > Mould_Growth_Limit, \"Mould risk\", \"No risk\"),     Mould_Growth_Index = calcMould_VTT(Temp, RH),      Lifetime = calcLM(Temp, RH),      Preservation_Index = calcPI(Temp, RH),      EMC_Wood = calcEMC_wood(Temp, RH),          # Sustainability calculations      Temp_from_DP = calcTemp(RH, Dew_Point),     RH_from_DP = calcRH_DP(Temp, Dew_Point),     RH_from_AH = calcRH_AH(Temp, Absolute_Humidity),     RH_if_2C_higher = calcRH_AH(Temp + 2, Absolute_Humidity)        ) |>   glimpse() #> Rows: 6 #> Columns: 24 #> $ Site                       <chr> \"London\", \"London\", \"London\", \"London\", \"Lo… #> $ Sensor                     <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Ro… #> $ Date                       <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, … #> $ Temp                       <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7 #> $ RH                         <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ Absolute_Humidity          <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.9… #> $ Dew_Point                  <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.1… #> $ Mixing_Ratio               <dbl> 5.957278, 5.940935, 5.924593, 5.888156, 5.8… #> $ Humidity_Ratio             <dbl> 5.957278, 5.940935, 5.924593, 5.888156, 5.8… #> $ Enthalpy                   <dbl> 37.15665, 37.11512, 37.07359, 36.87888, 36.… #> $ Saturation_Vapour_Pressure <dbl> 26.12119, 26.12119, 26.12119, 25.96205, 25.… #> $ Actual_Vapour_Pressure     <dbl> 9.612598, 9.586477, 9.560356, 9.502110, 9.4… #> $ Air_Density                <dbl> 1.192445, 1.192457, 1.192469, 1.192899, 1.1… #> $ Mould_Growth_Rate_mm_day   <dbl> 0, 0, 0, 0, 0, 0 #> $ Mould_Growth_Limit         <dbl> 75.11542, 75.11542, 75.11542, 75.14014, 75.… #> $ Mould_Growth_Risk          <chr> \"No risk\", \"No risk\", \"No risk\", \"No risk\",… #> $ Mould_Growth_Index         <dbl> 0, 0, 0, 0, 0, 0 #> $ Lifetime                   <dbl> 1.107855, 1.108860, 1.109869, 1.109854, 1.1… #> $ Preservation_Index         <dbl> 45.25849, 45.38181, 45.50580, 46.07769, 46.… #> $ EMC_Wood                   <dbl> 7.201471, 7.186361, 7.171247, 7.173308, 7.1… #> $ Temp_from_DP               <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7 #> $ RH_from_DP                 <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ RH_from_AH                 <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ RH_if_2C_higher            <dbl> 32.81971, 32.73052, 32.64134, 32.63838, 32.…   head(mydata) |>    tidy_TRHdata() |> # tidy   add_time_vars() |> # add time factors    add_humidity_calcs() |> # add humidity values    add_conservation_calcs() |> # add conservation risks   add_humidity_adjustments() # add environmental zones and RH adjustments #> # A tibble: 6 × 63 #>   Site   Sensor date                 Temp    RH seasonyear      season monthyear #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <ord>           <ord>  <ord>     #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8 winter (DJF) -… winte… January … #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7 winter (DJF) -… winte… January … #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6 winter (DJF) -… winte… January … #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6 winter (DJF) -… winte… January … #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5 winter (DJF) -… winte… January … #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2 winter (DJF) -… winte… January … #> # ℹ 55 more variables: daylight <fct>, day <dttm>, hour <int>, dayhour <dttm>, #> #   weekday <ord>, Month <dbl>, month <ord>, year <dbl>, DayYear <date>, #> #   Summer <chr>, Period <chr>, Pws <dbl>, Pw <dbl>, DP <dbl>, AH <dbl>, #> #   AD <dbl>, MR <dbl>, SH <dbl>, Enthalpy <dbl>, Mould_LIM <dbl>, #> #   Mould_risk <chr>, Mould_rate <dbl>, Mould_index <dbl>, #> #   PreservationIndex <dbl>, Lifetime <dbl>, EMC_wood <dbl>, TRH_within <lgl>, #> #   T_lower <lgl>, T_higher <lgl>, RH_lower <lgl>, RH_higher <lgl>, …"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"visualise-and-explore-data","dir":"Articles","previous_headings":"Examples","what":"Visualise and explore data","title":"ConSciR","text":"Combine calculations plotting explore patterns visually:  Conservator tools: mould growth index Calculate mould growth index using calcMould_VTT() visualise alongside humidity data.","code":"mydata |>   # Calculate Absolute Humidity and Dew Point   mutate(     AbsHum = calcAH(Temp, RH),     DewPoint = calcDP(Temp, RH)   ) |>   # Create base plot using graph_TRH function   graph_TRH() +   # Add Absolute Humidity line   geom_line(aes(Date, AbsHum), color = \"cyan4\", alpha = 0.7) +   # Add Dew Point line   geom_line(aes(Date, DewPoint), color = \"mediumvioletred\", alpha = 0.7) +   # Apply a theme   theme_bw() mydata |>   mutate(Mould = calcMould_VTT(Temp, RH)) |>   ggplot() +   geom_area(aes(Date, Mould), fill = \"lightseagreen\") +   labs(title = \"Mould Growth Index\", y = \"Mould Index\", x = NULL) +    theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/ConSciR.html","id":"psychrometric-chart","dir":"Articles","previous_headings":"Examples","what":"Psychrometric Chart","title":"ConSciR","text":"Create psychrometric charts temperature humidity data. functions package can used change calculations used.","code":"head(mydata, 100) |>   graph_psychrometric(     LowT = 12,      HighT = 28,     LowRH = 40,      HighRH = 70,     data_alpha = 0.3,     y_func = calcAH   ) +    theme_classic()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Conservation tools","text":"mydata dataset contains environmental monitoring data collected example heritage sites. includes measurements temperature (°C) relative humidity (%) recorded sensors time. Example usage load dataset package:  TRHgrid: Dataset used visualise functions dataset consists grid temperature relative humidity values used visualise function behavior. Temperatures range 0°C 100°C 0.25°C increments, relative humidity (RH) ranges 0% 100% 1% increments. complete factorial combination temperature RH values created using expand.grid(), pair represents unique condition. Contour plots generated show interactions derived variables across temperature-RH grid. dataset also supports validation checks temperature humidity calculations understand relationships among functions. Example R code generate dataset:","code":"filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\") mydata <- mydata |> filter(Sensor == \"Room 1\")  head(mydata) #> # A tibble: 6 × 5 #>   Site   Sensor Date                 Temp    RH #>   <chr>  <chr>  <dttm>              <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2  mydata |> graph_TRH() + theme_bw() + labs(title = \"Room 1\", subtitle = \"mydata\") Temp <- seq(0, 100, 0.25) RH <- seq(0, 100, 1)  TRHgrid <-    expand.grid(Temp, RH) |>    tibble() |>    rename(Temp = Var1, RH = Var2)   summary(TRHgrid) #>       Temp           RH      #>  Min.   :  0   Min.   :  0   #>  1st Qu.: 25   1st Qu.: 25   #>  Median : 50   Median : 50   #>  Mean   : 50   Mean   : 50   #>  3rd Qu.: 75   3rd Qu.: 75   #>  Max.   :100   Max.   :100"},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"mould-isoline-and-growth-rates","dir":"Articles","previous_headings":"Mould","what":"Mould Isoline and Growth Rates","title":"Conservation tools","text":"calcMould_Zeng Zeng et al. (2023) model predicting mould growth dynamic model considers temperature relative humidity assess risk mould formation. model developed predict risk mould growth building envelopes various conditions. establishes isoline model describing mould growth surfaces predicts growth rates outside isoline areas modifying Sautour model relevant air temperature humidity conditions. LIM0: Low limit mould growth LIM0.1: 0.1 mm/day growth rate LIM0.5: 0.5 mm/day growth rate LIM1: 1 mm/day growth rate LIM2: 2 mm/day growth rate LIM3: 3 mm/day growth rate LIM4: 4 mm/day growth rate LIM4: Greater 4 mm/day growth rate (9 mm/day theorectical maximum) code provided generates several visualisations help understand model. First, contour plot shows relationship temperature, relative humidity, mould growth potential across grid temperature humidity values. time series plot illustrates mould growth risk changes time relation relative humidity. bar chart displays distribution mould growth risk categories. visualisations help identify high-risk periods conditions may require inspection intervention prevent mould. See function documentation details calcMould_Zeng Zeng L, Chen Y, Ma M, et al. Prediction mould growth rate within building envelopes: development validation improved model. Building Services Engineering Research Technology. 2023;44(1):63-79. doi:10.1177/01436244221137846","code":"TRHgrid |>   mutate(Mould_LIM = calcMould_Zeng(Temp, RH)) |>   filter(Mould_LIM < 100) |>   ggplot(aes(Temp, RH, z = Mould_LIM)) +   geom_contour_filled(bins = 15) +   labs(x = \"Temperature (°C)\", y = \"Humidity (%)\",     title = \"Mould Isoline Limit: LM0\", fill = \"RH Limit\") +    theme_bw() head(mydata) |>   mutate(     Mould_LIM0 = calcMould_Zeng(Temp, RH, LIM = 0), # 0.1, 0.5, 1, 2, 3, 4     Mould_growth_rate = calcMould_Zeng(Temp, RH, label = TRUE),     )  #> # A tibble: 6 × 7 #>   Site   Sensor Date                 Temp    RH Mould_LIM0 Mould_growth_rate #>   <chr>  <chr>  <dttm>              <dbl> <dbl>      <dbl>             <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8       75.1                 0 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7       75.1                 0 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6       75.1                 0 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6       75.1                 0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5       75.1                 0 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2       75.1                 0  mydata_Zeng <- mydata |>   mutate(Mould_LIM0 = calcMould_Zeng(Temp, RH))  ymin <- min(mydata_Zeng$Mould_LIM0, na.rm = TRUE) ymax <- max(mydata_Zeng$Mould_LIM0, na.rm = TRUE)  ggplot(mydata_Zeng) +   geom_line(aes(Date, Mould_LIM0), col = \"purple\") +   geom_line(aes(Date, RH), col = \"blue\") +   coord_cartesian(ylim = c(ymin, ymax)) +   labs(title = \"Mould Isoline Limit\", y = \"Mould Limit\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"mould-index","dir":"Articles","previous_headings":"Mould","what":"Mould Index","title":"Conservation tools","text":"calcMould_VTT VTT model, developed Technical Research Centre Finland (VTT), mathematical approach predicting mould growth various building materials. uses Mould Index scale 0 6 quantify mould growth potential based temperature, relative humidity, time, material properties. model accounts growth initiation, intensity, maximum levels, decline unfavorable conditions. expanded original focus wood include different material sensitivity classes (see calcMould_VTT details). 0 = mould growth 1 = Small amounts mould growth surface visible microscope 2 = Several local mould growth colonies surface visible microscope 3 = Visual findings mould surface <10% coverage 50% coverage microsocpe 4 = Visual findings mould surface 10-50% coverage >50% coverage microscope 5 = Plenty growth surface >50% visual coverage 6 = Heavy tight growth, coverage almost 100% Hukka, ., & Viitanen, H. . (1999). mathematical model mould growth wooden material. Wood Science Technology, 33(6), 475-485.","code":"TRHgrid |>   mutate(Mould_Index = calcMould_VTT(Temp, RH)) |>   filter(Mould_Index > 0) |>   ggplot(aes(Temp, RH, z = Mould_Index)) +   geom_contour_filled(bins = 15) +   labs(x = \"Temperature (°C)\", y = \"Humidity (%)\",     title = \"VTT Model\", fill = \"Mould Index\") +    theme_bw() head(mydata) |>   mutate(Mould_VTT = calcMould_VTT(Temp, RH)) #> # A tibble: 6 × 6 #>   Site   Sensor Date                 Temp    RH Mould_VTT #>   <chr>  <chr>  <dttm>              <dbl> <dbl>     <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8         0 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7         0 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6         0 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6         0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5         0 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2         0  mydata |>   mutate(Mould_VTT = calcMould_VTT(Temp, RH)) |>   ggplot() +   geom_area(aes(Date, Mould_VTT), fill = \"purple\") +   labs(title = \"VTT Model: Mould Index\", x = NULL, y = \"Mould Index\") +    theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"lifetime-multiplier","dir":"Articles","previous_headings":"","what":"Lifetime multiplier","title":"Conservation tools","text":"calcLM calcLM function calculates lifetime multiplier chemical degradation objects based temperature relative humidity conditions. metric provides estimate object’s expected lifetime relative standard conditions (20°C 50% RH); values >1 indicate conditions prolong lifetime; values <1 indicate higher risk chemical degradation. Lifetime multiplier incorporates Arrhenius equation account temperature effects power law relationship relative humidity, making applicable various materials paper, synthetic films, dyes. approach allows conservators assess environmental conditions identify periods objects may higher risk degradation. Michalski, S. (2002). Double life five-degree drop, double life halving relative humidity. R. Vontobel (Ed.), Preprints 13th ICOM-CC Triennial Meeting Rio de Janeiro (Vol. , pp. 66-72). London: James & James.","code":"TRHgrid |>   mutate(LifeTime = calcLM(Temp, RH)) |>   ggplot(aes(Temp, RH, z = LifeTime)) +   geom_contour_filled(bins = 15) +   labs(title = \"Lifetime multiplier\", fill = \"Lifetime\",         subtitle = \"Relative expected lifetime of heritage materials compared to 20°C and 50%rh\",        x = \"Temperature (°C)\", y = \"Humidity (%)\") +    theme_bw() mydata |>   mutate(Lifetime = calcLM(Temp, RH)) |>   ggplot() +   geom_line(aes(Date, Lifetime), col = \"cyan4\", size = 1) +    # add 20C and 50%RH reference line   geom_hline(yintercept = calcLM(20, 50), col = \"mediumvioletred\", size = 1) +    labs(     title = \"Lifetime multiplier of 'mydata'\",      x = NULL, y = \"Lifetime multiplier\",     subtitle = \"Lifetime multiplier over time, with reference to standard conditions (20°C, 50%rh)\") +   theme_bw() mydata |>   mutate(Lifetime = calcLM(Temp, RH)) |>   ggplot() +    geom_density(aes(Lifetime), fill = \"cyan4\", alpha = 0.4) +   # add 20C and 50%RH reference line   geom_vline(xintercept = calcLM(20, 50), col = \"mediumvioletred\", size = 1) +    labs(title = \"Lifetime Multiplier Distribution\",        x = \"Lifetime multiplier\",         subtitle = \"Reference conditions of 20°C and 50%rh\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"preservation-index","dir":"Articles","previous_headings":"","what":"Preservation Index","title":"Conservation tools","text":"calcPI Preservation Index, developed Image Permanence Institute, chemical kinetics metric determines rate deterioration materials based temperature relative humidity. calcPI function returns estimated years deterioration, higher values indicating conditions hygro-thermodynamically favorable object. information Preservation Index can found : https://s3.cad.rit.edu/ipi-assets/publications/understanding_preservation_metrics.pdf","code":"# Log-Preservation Index  TRHgrid |>   mutate(PI_log10 = calcPI(Temp, RH) |> log10()) |>   ggplot(aes(Temp, RH, z = PI_log10)) +   geom_contour_filled(bins = 15) +   labs(title = \"Preservation Index (log10)\", fill = \"log10(PI)\",        x = \"Temperature (°C)\", y = \"Humidity (%)\") +    theme_bw() # Applying the Preservation Index on `mydata` mydata |>   mutate(PI = calcPI(Temp, RH)) |>   ggplot() +    geom_line(aes(Date, PI), col = \"violet\", size = 1) +    # add 20C and 50%RH reference line   geom_hline(yintercept = calcPI(20, 50), col = \"mediumvioletred\", size = 1) +    labs(title = \"Preservation Index\", x = NULL,  y = \"Preservation Index, years\",        subtitle = \"Years to detoriation over time, with reference to standard conditions (20°C, 50%rh)\") +   theme_bw() mydata |>   mutate(PI = calcPI(Temp, RH)) |>   ggplot() +    geom_density(aes(PI), fill = \"violet\", alpha = 0.4) +   # add 20C and 50%RH reference line   geom_vline(xintercept = calcPI(20, 50), col = \"mediumvioletred\", size = 1) +    labs(title = \"Preservation Index\", x = \"Years to detoriation\",        subtitle = \"20C and 50%rh reference line\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Conservation-tools.html","id":"equilibrium-moisture-content","dir":"Articles","previous_headings":"","what":"Equilibrium Moisture Content","title":"Conservation tools","text":"calcEMC_wood Equilibrium Moisture Content (EMC) determine ideal relative humidity storing materials, indicates point object neither gains loses moisture environment. Maintaining appropriate EMC levels prevents issues mold growth, warping, cracking, dimensional changes organic materials like wood, textiles, paper. Wood: safe EMC range wood typically 6% 20%. range helps prevent issues warping, cracking, mold growth, can occur moisture content falls exceeds levels. Simpson, W. T. (1998). “Equilibrium moisture content wood outdoor locations United States worldwide.” Res. Note FPL-RN-0268. U.S. Department Agriculture, Forest Service, Forest Products Laboratory. Hailwood, . J., & Horrobin, S. (1946). “Absorption water polymers.” Journal Society Chemical Industry, 65(12), 499-502.","code":"# EMC plotted at different temperature and relative humidity TRHgrid |>   mutate(EMC = calcEMC_wood(Temp, RH)) |>   ggplot(aes(Temp, RH, z = EMC)) +   geom_contour_filled(bins = 15) +   labs(title = \"Equilibrium Moisture Content (EMC)\", fill = \"EMC\",         x = \"Temperature (°C)\", y = \"Humidity (%)\") +    theme_bw() # EMC on `mydata` mydata |>   mutate(EMC = calcEMC_wood(Temp, RH)) |>   ggplot() +    geom_line(aes(Date, EMC), col = \"hotpink\", size = 1) +    geom_hline(yintercept = c(6, 20), col = \"mediumvioletred\", size = 1) +    labs(title = \"Equilibrium Moisture Content (EMC)\",         subtitle = \"6-20% lines - 'safe' EMC range\",        x = NULL, y = \"EMC\") +   theme_bw() mydata |>   mutate(EMC = calcEMC_wood(Temp, RH)) |>   ggplot() +    geom_density(aes(EMC), fill = \"hotpink\", alpha = 0.4) +   geom_vline(xintercept = c(6, 20), col = \"mediumvioletred\", size = 1) +    labs(title = \"Equilibrium Moisture Content\", x = NULL,        subtitle = \"6-20% lines - 'safe' EMC range\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Humidity functions","text":"mydata dataset contains environmental monitoring data collected example heritage sites. includes measurements temperature (°C) relative humidity (%) recorded sensors time. Example usage load dataset package:  TRHgrid: Dataset used visualise functions dataset consists grid temperature relative humidity values used visualise function behavior. Temperatures range 0°C 100°C 0.25°C increments, relative humidity (RH) ranges 0% 100% 1% increments. complete factorial combination temperature RH values created using expand.grid(), pair represents unique condition. Contour plots generated show interactions derived variables across temperature-RH grid. dataset also supports validation checks temperature humidity calculations understand relationships among functions. Example R code generate dataset:","code":"filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\") mydata <- mydata |> filter(Sensor == \"Room 1\")  head(mydata) #> # A tibble: 6 × 5 #>   Site   Sensor Date                 Temp    RH #>   <chr>  <chr>  <dttm>              <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2  mydata |> graph_TRH() + theme_bw() + labs(title = \"Room 1\", subtitle = \"mydata\") Temp <- seq(0, 100, 0.25) RH <- seq(0, 100, 1)  TRHgrid <-    expand.grid(Temp, RH) |>    tibble() |>    rename(Temp = Var1, RH = Var2)   summary(TRHgrid) #>       Temp           RH      #>  Min.   :  0   Min.   :  0   #>  1st Qu.: 25   1st Qu.: 25   #>  Median : 50   Median : 50   #>  Mean   : 50   Mean   : 50   #>  3rd Qu.: 75   3rd Qu.: 75   #>  Max.   :100   Max.   :100"},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"adjusting-humidity-using-the-package-functions","dir":"Articles","previous_headings":"Example workflows","what":"Adjusting Humidity using the package functions","title":"Humidity functions","text":"Starting measurements temperature (Temp) relative humidity (RH), several derived variables commonly used can calculated: Principles Humidity Adjustment  following principles guide relative humidity adjustments assumption constant atmospheric pressure: Increasing AH constant temperature raises RH. Decreasing AH constant temperature lowers RH. Lowering temperature constant AH raises RH. Raising temperature constant AH lowers RH. smaller difference air temperature dew point, closer air saturation (100% RH). Moving temperature closer dew point increases RH, whereas moving away decreases RH. Changing Absolute Humidity example demonstrates adjusting RH calculating new absolute humidity corresponding target RH (tRH) measured temperature, computing effects RH:    Changing Temperature   Using Dew Point","code":"# Functions applied on the mydata dataset head(mydata) |>    mutate(     Absolute_Humidity = calcAH(Temp, RH),      Dew_Point = calcDP(Temp, RH),      Frost_Point = calcFP(Temp, RH),     Mixing_Ratio = calcMR(Temp, RH),      Specific_Humidity = calcSH(Temp, RH),     Humidity_Ratio = calcHR(Temp, RH),     Enthalpy = calcEnthalpy(Temp, RH),      Saturation_Vapour_Pressure = calcPws(Temp),      Actual_Vapour_Pressure = calcPw(Temp, RH),      RH_VP = 100 * (Actual_Vapour_Pressure / Saturation_Vapour_Pressure),     Air_Density = calcAD(Temp, RH),     Temp_calc = calcTemp(RH, Dew_Point),     RH_AH_calc = calcRH_AH(Temp, Absolute_Humidity),     RH_DP_calc = calcRH_DP(Temp, Dew_Point)   ) |>   glimpse() #> Rows: 6 #> Columns: 19 #> $ Site                       <chr> \"London\", \"London\", \"London\", \"London\", \"Lo… #> $ Sensor                     <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Ro… #> $ Date                       <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, … #> $ Temp                       <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7 #> $ RH                         <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ Absolute_Humidity          <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.9… #> $ Dew_Point                  <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.1… #> $ Frost_Point                <dbl> 8.260808, 8.225778, 8.190662, 8.100017, 8.0… #> $ Mixing_Ratio               <dbl> 5.957278, 5.940935, 5.924593, 5.888156, 5.8… #> $ Specific_Humidity          <dbl> 0.8562656, 0.8559272, 0.8555872, 0.8548233,… #> $ Humidity_Ratio             <dbl> 5.957278, 5.940935, 5.924593, 5.888156, 5.8… #> $ Enthalpy                   <dbl> 37.15665, 37.11512, 37.07359, 36.87888, 36.… #> $ Saturation_Vapour_Pressure <dbl> 26.12119, 26.12119, 26.12119, 25.96205, 25.… #> $ Actual_Vapour_Pressure     <dbl> 9.612598, 9.586477, 9.560356, 9.502110, 9.4… #> $ RH_VP                      <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ Air_Density                <dbl> 1.192445, 1.192457, 1.192469, 1.192899, 1.1… #> $ Temp_calc                  <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7 #> $ RH_AH_calc                 <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ RH_DP_calc                 <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 # Psychrometric chart of mydata mydata |>   filter(Sensor == \"Room 1\") |>   graph_psychrometric(y_func = calcAH) +   labs(title = \"Room 1 Before Adjustment\") +    theme_classic() # Changing Absolute Humidity  using_calcAH <-    mydata |>    filter(Sensor == \"Room 1\") |>   mutate(     # Calculate the Absolute humidity, AH     AH = calcAH(Temp, RH),      # Calculate the Dew point, DP     DP = calcDP(Temp, RH),      # Target RH, tRH      tRH = 50,                # Target Absolute Humidity, AH*     AHstar = calcAH(Temp, tRH),          # Required AH change, difference between AH and AH*      dAH = AHstar - AH,      # Validation check (should be near zero)     AHcheck = AHstar - (AH + dAH),      # New RH after adjustment, RH*     RHstarAH = calcRH_AH(Temp, AHstar),      # RH difference from target     RHerrorAH = RHstarAH - tRH,    )   # View adjustment summary glimpse(using_calcAH) #> Rows: 35,136 #> Columns: 13 #> $ Site      <chr> \"London\", \"London\", \"London\", \"London\", \"London\", \"London\", … #> $ Sensor    <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", … #> $ Date      <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00:29:… #> $ Temp      <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, 21.6, … #> $ RH        <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2, 36.3, 36.4, 36.0, 36.0, … #> $ AH        <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670, 6.897508, … #> $ DP        <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529, 6.056922, … #> $ tRH       <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, … #> $ AHstar    <dbl> 9.582086, 9.582086, 9.582086, 9.526945, 9.526945, 9.526945, … #> $ dAH       <dbl> 2.529671, 2.548835, 2.567999, 2.553221, 2.572275, 2.629437, … #> $ AHcheck   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ RHstarAH  <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, … #> $ RHerrorAH <dbl> 7.105427e-15, 7.105427e-15, 7.105427e-15, 0.000000e+00, 0.00…   # Plot of the difference in Absolute humidity and RH error using_calcAH |>   ggplot() +   geom_line(aes(Date, dAH), col = \"cyan4\", alpha = 0.8) +    geom_line(aes(Date, RHerrorAH), col = \"goldenrod\", alpha = 0.8) +    geom_smooth(aes(Date, dAH)) +    labs(title = \"Absolute Humidity Required to Achieve Target RH\",         subtitle = \"Positive values indicate addition of humidity\",        x = NULL, y = \"Absolute Humidity (g/m^3)\") +   theme_bw() # Psychrometric chart of new data (using_calcAH) after adjustment  using_calcAH |>   filter(Sensor == \"Room 1\") |>   graph_psychrometric(RH = \"RHstarAH\", y_func = calcAH) +   labs(title = \"Room 1 After Humidity Adjustment\") +    theme_classic() # Changing Temperature using_calcTemp <-    mydata |>    mutate(     # Absolute humidity, AH     AH = calcAH(Temp, RH),      # Dew point, DP     DP = calcDP(Temp, RH),      # Target RH     tRH = 50,                # T*: Tstar new temperature at target RH      Tstar = calcTemp(tRH, DP),      # Difference in measure temperature and new temperature     dTemp = Tstar - Temp,      # Check     Tcheck = Tstar - (Temp + dTemp),      # RHstarT: New humidity with new temperature      RHstarT = calcRH_DP(Tstar, DP),     # Error      RHerrorT = RHstarT - tRH   )  glimpse(using_calcTemp) #> Rows: 35,136 #> Columns: 13 #> $ Site     <chr> \"London\", \"London\", \"London\", \"London\", \"London\", \"London\", \"… #> $ Sensor   <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"… #> $ Date     <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00:29:5… #> $ Temp     <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, 21.6, 2… #> $ RH       <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2, 36.3, 36.4, 36.0, 36.0, 3… #> $ AH       <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670, 6.897508, 6… #> $ DP       <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529, 6.056922, 6… #> $ tRH      <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 5… #> $ Tstar    <dbl> 16.87424, 16.83134, 16.78833, 16.69208, 16.64899, 16.51913, 1… #> $ dTemp    <dbl> -4.925756, -4.968663, -5.011672, -5.007924, -5.051005, -5.180… #> $ Tcheck   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ RHstarT  <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 5… #> $ RHerrorT <dbl> -7.105427e-15, 1.421085e-14, 1.421085e-14, 1.421085e-14, 0.00…  # Plot the difference and check the error using_calcTemp |>   ggplot() +   geom_line(aes(Date, dTemp), col = \"firebrick\", alpha = 0.8) +    geom_line(aes(Date, RHerrorT), col = \"goldenrod\", alpha = 0.8) +    geom_smooth(aes(Date, dTemp)) +    labs(title = \"Temperature Required to Achieve Target RH\",        subtitle = \"Positive values indicate increasing the temperature\",        x = NULL, y = \"Temperature (°C)\") +   theme_bw() using_calcTemp |>   graph_psychrometric(RH = \"RHstarT\", y_func = calcAH) +   labs(title = \"Room 1 After Temperature Adjustment\",        subtitle = \"Temperature (°C)\") +     theme_classic() # Graph Dew Point mydata |>   graph_psychrometric(y_func = calcDP) +   labs(title = \"Room 1 Before Adjustment\",        subtitle = \"Dew Point\") +     theme_classic() # Using Dew Point  using_calcDP <-    mydata |>   mutate(     # Absolute humidity, AH     AH = calcAH(Temp, RH),     # Dew point, DP     DP = calcDP(Temp, RH),     # Target RH     tRH = 50,     # DP*: DPstar new dew point at target RH      DPstar = calcDP(Temp, tRH),     # RH*: New relative humidity at new dew point     RHstarDP = calcRH_DP(Temp, DPstar),     # Difference in measured dew point and new dew point     dDP = DPstar - DP,      # Error      RHerrorDP = RHstarDP - tRH   )   glimpse(using_calcDP) #> Rows: 35,136 #> Columns: 12 #> $ Site      <chr> \"London\", \"London\", \"London\", \"London\", \"London\", \"London\", … #> $ Sensor    <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", … #> $ Date      <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00:29:… #> $ Temp      <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, 21.6, … #> $ RH        <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2, 36.3, 36.4, 36.0, 36.0, … #> $ AH        <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670, 6.897508, … #> $ DP        <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529, 6.056922, … #> $ tRH       <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, … #> $ DPstar    <dbl> 10.91667, 10.91667, 10.91667, 10.82472, 10.82472, 10.82472, … #> $ RHstarDP  <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, … #> $ dDP       <dbl> 4.532701, 4.572214, 4.611823, 4.608514, 4.648190, 4.767797, … #> $ RHerrorDP <dbl> 1.421085e-14, 1.421085e-14, 1.421085e-14, 0.000000e+00, 0.00…  # Plot the difference and check the error using_calcDP |>   ggplot() +   geom_line(aes(Date, dDP), col = \"mediumvioletred\", alpha = 0.8) +    geom_line(aes(Date, RHerrorDP), col = \"goldenrod\", alpha = 0.8) +    geom_smooth(aes(Date, dDP)) +    labs(title = \"Dew Point Required to Achieve Target RH\",         x = NULL, y = \"Dew Point (°C)\") +   theme_bw() using_calcDP |>   graph_psychrometric(RH = \"RHstarDP\", y_func = calcDP) +   labs(title = \"Room 1 After Dew Point Adjustment\",        subtitle = \"Dew Point (°C)\") +     theme_classic()"},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"water-vapour-saturation-pressure","dir":"Articles","previous_headings":"Functions","what":"Water Vapour Saturation Pressure","title":"Humidity functions","text":"calcPws Water vapour saturation pressure pressure water vapour air balanced liquid water certain temperature. maximum amount moisture air can hold temperature moisture starts condense water droplets (like dew fog). pressure increases temperature rises warm air can hold moisture cold air. calcPws function calculates water vapour saturation pressure (hPa) temperature (°C) based one several empirical formulations: Arden Buck equation (“Buck”) [default] International Association Properties Water Steam (“IAPWS”) August-Roche-Magnus approximation (“Magnus”) VAISALA humidity conversion formula (“VAISALA”) formulation provides slightly different estimates saturation pressure, varying complexities accuracies suited different applications. discussion benefits comparative accuracy equation can found Wikipedia: https://en.wikipedia.org/wiki/Vapour_pressure_of_water#cite_note-1    Accuracy calcPws function tested International Association Properties Water Steam (IAPWS) R package IAPWS95.","code":"# Psychrometric graph of Saturation vapour Pressure calculated via `calcPws`  mydata |>   graph_psychrometric(y_func = calcPws) +   theme_bw() # Contour plot of saturation vapour pressure over temperature and humidity grid TRHgrid |>   mutate(Pws = calcPws(Temp)) |>   ggplot(aes(Temp, RH, z = Pws)) +    geom_contour_filled(bins = 15) +    labs(title = \"Saturation Vapour Pressure\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"hPa\") +   theme_bw() # Comparison of saturation vapour pressure calculated using different methods mydata |>   dplyr::mutate(     Pw_Buck = calcPws(Temp, method = \"Buck\"),     Pw_IAPWS = calcPws(Temp, method = \"IAPWS\"),     Pw_Magnus = calcPws(Temp, method = \"Magnus\"),     Pw_VAISALA = calcPws(Temp, method = \"VAISALA\")     ) |>   ggplot() +   geom_line(aes(Date, Pw_Buck), col = \"darkblue\", alpha = 0.2) +    geom_line(aes(Date, Pw_IAPWS), col = \"darkred\", alpha = 0.2) +    geom_line(aes(Date, Pw_Magnus), col = \"darkgreen\", alpha = 0.2) +    geom_line(aes(Date, Pw_VAISALA), col = \"orange\", alpha = 0.2) +    labs(title = \"Comparison of saturation vapour pressure equations\",         subtitle = \"Buck (blue), IAPWS (red), Magnus (green), VAISALA (orange)\",         y = \"Water vapour saturation pressure (hPa)\", x = NULL) +    theme_bw() # Load IAPWS95 package for standard water/steam property functions library(IAPWS95)  # Vectorize the pSatT function for Saturation Pressure, as a Function of Temperature pSatT_vec <- Vectorize(pSatT)   # Create a dataframe of temperature values from triple point of water to 100C (at saturation 100%RH) Temp_data <- tibble(Temp = seq(0.1, 99, 0.1), RH = 100)  # Calculate saturation vapor pressure using `calcPws` and vectorised `pSatT` functions  Temp_data <-    Temp_data |>   mutate(     TempK = Temp + 273.15,     Pws = calcPws(Temp),     PwsI = 10000 * pSatT_vec(TempK),      Pws_diff = Pws - PwsI   )  # Create a density plot comparing the distributions of the two saturation pressure calculations Temp_data |>   ggplot() +    geom_density(aes(PwsI), col = \"black\") +    geom_density(aes(Pws), col = \"red\", alpha = 0.3) +   labs(title = \"Comparison of Saturation Vapor Pressure Calculations\",        subtitle = \"`calcPws` Function (red) vs. IAPWS95 Standard (black)\",         x = \"Saturation Vapor Pressure (hPa)\", y = \"Density\") +    theme_classic()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"water-vapour-pressure","dir":"Articles","previous_headings":"Functions","what":"Water Vapour Pressure","title":"Humidity functions","text":"calcPw Water vapour pressure pressure exerted water molecules air gas. reflects much moisture actually present air given temperature. Unlike saturation vapour pressure—maximum water vapour pressure air can hold temperature—water vapour pressure tells us current moisture level air. function calcPw calculates water vapour pressure temperature relative humidity.","code":"# Psychrometric graph of Water Vapour Pressure calculated via `calcPw`, Buck method mydata |>   graph_psychrometric(y_func = calcPw) +   theme_bw() # # Contour plot of water vapour pressure over temperature and humidity grid TRHgrid |>   mutate(Pw = calcPw(Temp, RH)) |>   ggplot(aes(Temp, RH, z = Pw)) +    geom_contour_filled(bins = 15) +    labs(title = \"Water Vapour Pressure\",         x = \"Temperature (°C)\", y = \"Humidity (%)\") +    labs(title = \"Water Vapour Pressure\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"hPa\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"temperature","dir":"Articles","previous_headings":"Functions","what":"Temperature","title":"Humidity functions","text":"calcTemp temperature calculation function, calcTemp, uses measurements dew point relative humidity estimate air temperature. useful check accurately temperature can derived humidity-related data. Dew point calculated using calcDP. dew point temperature air becomes saturated water vapour starts condense. Using dew point relative humidity together provides way calculate temperature indirectly. difference (Temp_error) calculated actual temperature reveals accuracy calculation across varying temperature relative humidity TRHgrid dataset. Smaller values mean less error.","code":"# Calculate Dew Point and Temperature from dataset head(mydata) |>    dplyr::mutate(     DewPoint = calcDP(Temp, RH),      Temp_via_DP = calcTemp(RH, DewPoint),     Temp_error = Temp_via_DP - Temp     ) #> # A tibble: 6 × 8 #>   Site   Sensor Date                 Temp    RH DewPoint Temp_via_DP Temp_error #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl>       <dbl>      <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     6.38        21.8  -3.55e-15 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     6.34        21.8   0        #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     6.30        21.8   0        #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     6.22        21.7  -3.55e-15 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     6.18        21.7   0        #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2     6.06        21.7   0 # Error plot to visualise difference between calculated and original temperature TRHgrid |>   mutate(     DewPoint = calcDP(Temp, RH),     Temp_via_DP = calcTemp(RH, DewPoint),      Temp_error = Temp_via_DP - Temp   ) |>   ggplot(aes(Temp, RH, z = Temp_error)) +    geom_contour_filled() +    labs(title = \"Difference between calculated and actual temperature\",         subtitle = \"Shows accuracy of calculation\",        x = \"Temperature (°C)\", y = \"Humidity (%)\", fill = \"Difference\") +    theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"relative-humidity","dir":"Articles","previous_headings":"Functions","what":"Relative Humidity","title":"Humidity functions","text":"calcRH_AH calcRH_DP Relative humidity (RH) measure much moisture air compared maximum amount air can hold temperature. expressed percentage: 100% means air fully saturated can hold moisture. package includes two ways calculate relative humidity: Using Dew Point (calcRH_DP): method uses temperature dew point (temperature air becomes saturated) calculate relative humidity. ’s common approach dew point often directly measured estimated. Using Absolute Humidity (calcRH_AH): method uses temperature absolute humidity (actual amount moisture air) calculate relative humidity. Contour plots compare relative humidity calculated functions original measured RH values, showing closely match, errors differences occur.","code":"# Calculate RH from Dew Point head(mydata) |>    dplyr::mutate(     DewPoint = calcDP(Temp, RH),     RH_via_DP = calcRH_DP(Temp, DewPoint),      RH_DP_error = RH_via_DP - RH     ) #> # A tibble: 6 × 8 #>   Site   Sensor Date                 Temp    RH DewPoint RH_via_DP RH_DP_error #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl>     <dbl>       <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     6.38      36.8    0        #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     6.34      36.7    7.11e-15 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     6.30      36.6    0        #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     6.22      36.6    0        #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     6.18      36.5    0        #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2     6.06      36.2    0      # Error plot for RH from Dew Point TRHgrid |>   mutate(     DewPoint = calcDP(Temp, RH),     RH_DPcalc = calcRH_DP(Temp, DewPoint),      RH_DP_error = RH_DPcalc - RH   ) |>   ggplot(aes(Temp, RH, z = RH_DP_error)) +    labs(title = \"Difference between calculated and actual humidity\",         subtitle = \"RH calc from dew point minus original RH\",        x = \"Temperature (°C)\", y = \"Humidity (%)\", fill = \"Difference\") +   geom_contour_filled() +    theme_bw() # Calculate RH from Absolute Humidity head(mydata) |>    dplyr::mutate(     AH = calcAH(Temp, RH),     RH_via_AH = calcRH_AH(Temp, AH),      RH_AH_error = RH_via_AH - RH     ) #> # A tibble: 6 × 8 #>   Site   Sensor Date                 Temp    RH    AH RH_via_AH RH_AH_error #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl>     <dbl>       <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  7.05      36.8    7.11e-15 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  7.03      36.7    7.11e-15 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  7.01      36.6    7.11e-15 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  6.97      36.6    7.11e-15 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  6.95      36.5    7.11e-15 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2  6.90      36.2    0      # Error plot for RH from Absolute Humidity TRHgrid |>   mutate(RH_AH_error = calcRH_AH(Temp, calcAH(Temp, RH)) - RH) |>   ggplot(aes(Temp, RH, z = RH_AH_error)) +    labs(title = \"Difference between calculated and actual humidity\",         subtitle = \"RH calc from absolute humidity minus original RH\",        x = \"Temperature (°C)\", y = \"Humidity (%)\", fill = \"Difference\") +   geom_contour_filled() +    theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"absolute-humidity","dir":"Articles","previous_headings":"Functions","what":"Absolute Humidity","title":"Humidity functions","text":"calcAH Absolute humidity (AH) measures actual amount water vapour present air, regardless temperature. expressed mass water vapour per volume air (e.g., grams per cubic meter). contrast relative humidity, absolute humidity represents true moisture content change directly temperature changes. function calcAH calculates absolute humidity temperature relative humidity measurements.","code":"# Graph Absolute Humidity  mydata |>   graph_psychrometric(y_func = calcAH) +   theme_bw() # Contour plot over temperature-relative humidity grid TRHgrid |>   mutate(AH = calcAH(Temp, RH)) |>   ggplot(aes(Temp, RH, z = AH)) +    geom_contour_filled(bins = 15) +    labs(title = \"Absolute Humidity\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"g/m^3\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"dew-point","dir":"Articles","previous_headings":"Functions","what":"Dew Point","title":"Humidity functions","text":"calcDP Dew point (DP) temperature air becomes fully saturated moisture water vapour begins condense liquid water—forming dew, fog, frost. basically tells us much moisture air. air cools dew point temperature, moisture start appear water droplets. closer dew point actual air temperature, higher relative humidity muggier damper air feels. Dew point stays even air temperature changes, making reliable indicator moisture content. function calcDP calculates dew point temperature measured air temperature relative humidity. offers two calculation methods: Magnus (default): August-Roche-Magnus approximation, suitable temperatures 0°C 60°C humidity 1% 100%. Buck: Arden Buck equation Bögel modification, often providing greater accuracy, especially low temperatures (-30°C).","code":"# Psychrometric graph of dew point mydata |>      graph_psychrometric(y_func = calcDP) +      theme_bw() # Contour plot of dew point over temperature and RH TRHgrid |>      mutate(DP = calcDP(Temp, RH)) |>      ggplot(aes(Temp, RH, z = DP)) +       geom_contour_filled(bins = 15) +       labs(title = \"Dew Point\", x = \"Temperature (°C)\", y = \"Humidity (%)\",                fill = \"°C\") +      theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"frost-point","dir":"Articles","previous_headings":"Functions","what":"Frost Point","title":"Humidity functions","text":"calcFP Frost Point (FP) temperature water vapour air condenses ice rather liquid water. relevant air temperature dew point fall freezing, indicating conditions frost formation. Frost point helps understanding moisture behavior cold environments, crucial conservation, meteorology, climate control. calcFP function computes frost point temperature measured air temperature relative humidity, extending dew point calculations 0°C considering vapour pressure ice. Note: frost point function (calcFP) currently development shows less stability results, warranting caution use.","code":"# Calculate Frost Point and add to mydata mydata |>   mutate(FP = calcFP(Temp, RH)) |>   graph_TRH() +   geom_line(aes(Date, FP), col = \"cornflowerblue\") +    labs(title = \"Frost Point (light blue)\") +   theme_bw() # Contour plot of frost point temperature over temperature and relative humidity grid TRHgrid |>   mutate(FrostPoint = calcFP(Temp, RH)) |>   ggplot(aes(Temp, RH, z = FrostPoint)) +    geom_contour_filled(bins = 15) +    labs(title = \"Frost Point\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"°C\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"specific-humidity","dir":"Articles","previous_headings":"Functions","what":"Specific Humidity","title":"Humidity functions","text":"calcSH Specific humidity (SH) measures amount water vapour air relative total mass air, including dry air water vapour. usually expressed grams water vapour per kilogram moist air (g/kg). Unlike relative humidity, depends temperature, specific humidity directly quantifies actual moisture content air change temperature pressure. Specific humidity differs slightly mixing ratio, measures mass water vapour relative mass dry air. key difference specific humidity divides total air mass (dry air plus water vapour), mixing ratio divides dry air mass. mass water vapour usually much smaller mass dry air, two values similar, specific humidity always slightly less mixing ratio. function calcSH calculates specific humidity temperature relative humidity data, helps understanding true moisture amount air regardless changes temperature.","code":"# Psychrometric graph of specific humidity mydata |>   graph_psychrometric(y_func = calcSH) +   theme_bw() # Contour plot of specific humidity over temperature and RH TRHgrid |>   mutate(SH = calcSH(Temp, RH)) |>   ggplot(aes(Temp, RH, z = SH)) +    geom_contour_filled(bins = 15) +    labs(title = \"Specific Humidity\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"g/kg\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"mixing-ratio","dir":"Articles","previous_headings":"Functions","what":"Mixing Ratio","title":"Humidity functions","text":"calcMR Mixing ratio (MR) mass water vapour per unit mass dry air given volume. commonly expressed grams water vapour per kilogram dry air (g/kg). measure important remains nearly constant air changes temperature pressure, making useful tracking moisture content moving air masses. mixing ratio tells us much water vapour mixed dry air. differs slightly specific humidity (water vapour per total moist air) closely related. mixing ratio specific humidity measure much water vapour air, key difference lies denominators: mixing ratio expresses mass water vapour relative mass dry air, whereas specific humidity expresses relative total mass moist air (dry air plus water vapour). mass water vapour usually small compared dry air, values similar, specific humidity always slightly less mixing ratio. mixing ratio fundamental concept used meteorology, air conditioning, conservation understanding controlling humidity. function calcMR calculates mixing ratio temperature relative humidity data.","code":"# Psychrometric graph of mixing ratio mydata |>   graph_psychrometric(y_func = calcMR) +   theme_bw() # Contour plot of mixing ratio over temperature and RH TRHgrid |>   mutate(MR_log10 = calcMR(Temp, RH) |> log10()) |>   ggplot(aes(Temp, RH, z = MR_log10)) +    geom_contour_filled(bins = 15) +    labs(title = \"Mixing Ratio (log)\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"log10(g/kg)\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"humidity-ratio","dir":"Articles","previous_headings":"Functions","what":"Humidity Ratio","title":"Humidity functions","text":"calcHR Humidity ratio (HR) (also known mixing ratio) mass water vapour present per unit mass dry air, typically expressed grams water vapour per kilogram dry air (g/kg). quantifies actual moisture content air relative dry air component . Humidity ratio essential measure meteorology, HVAC, conservation, stays almost constant changes temperature pressure, except air cooled dew point. used standard axis psychrometric charts represent moisture content. Unlike absolute humidity (mass water vapour per volume air), humidity ratio expresses water vapour relative dry air mass, making stable air mass comparisons. function calcHR calculates humidity ratio temperature relative humidity data.","code":"# Psychrometric graph of humidity ratio mydata |>   graph_psychrometric(y_func = calcHR) +   theme_bw() # Contour plot of humidity ratio over temperature and RH TRHgrid |>   mutate(HumidityRatio = calcHR(Temp, RH) |> log10()) |>   ggplot(aes(Temp, RH, z = HumidityRatio)) +    geom_contour_filled(bins = 15) +    labs(title = \"Humidity Ratio\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"log10(g/kg)\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"air-density","dir":"Articles","previous_headings":"Functions","what":"Air Density","title":"Humidity functions","text":"calcAD Air density (AD) mass air per unit volume, typically expressed kilograms per cubic meter (kg/m³). depends temperature, atmospheric pressure, humidity. Warm air less dense cold air increasing temperature causes air expand occupy larger volume. Humid air less dense dry air water vapour lower molecular weight major components dry air. Air density influences many physical processes, including heat exchange, airflow, buoyancy. function calcAD calculates air density based temperature relative humidity values.","code":"# Psychrometric graph of air density mydata |>   graph_psychrometric(y_func = calcAD) +   theme_bw() # Contour plot of air density over temperature and RH TRHgrid |>   mutate(AirDensity = calcAD(Temp, RH)) |>   ggplot(aes(Temp, RH, z = AirDensity)) +    geom_contour_filled(bins = 15) +    labs(title = \"Air Density\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"kg/m³\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"enthalpy","dir":"Articles","previous_headings":"Functions","what":"Enthalpy","title":"Humidity functions","text":"calcEnthalpy Enthalpy total heat energy content moist air, combining sensible heat air temperature latent heat carried water vapour. usually measured kilojoules per kilogram (kJ/kg) dry air. Enthalpy increases higher air temperature higher moisture content. key quantity understanding heating, cooling, humidification processes, reflects energy required change air temperature moisture. function calcEnthalpy computes enthalpy using temperature relative humidity.","code":"# Psychrometric graph of enthalpy mydata |>   graph_psychrometric(y_func = calcEnthalpy) +   theme_bw() # Contour plot of enthalpy over temperature and RH TRHgrid |>   mutate(Enthalpy_log10 = calcEnthalpy(Temp, RH) |> log10()) |>   ggplot(aes(Temp, RH, z = Enthalpy_log10)) +    geom_contour_filled(bins = 15) +    labs(title = \"Enthalpy (log)\", x = \"Temperature (°C)\", y = \"Humidity (%)\",        fill = \"log(kJ/kg)\") +    theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Humidity-functions.html","id":"accuracy-checks","dir":"Articles","previous_headings":"Functions","what":"Accuracy checks","title":"Humidity functions","text":"Accuracy functions ConSciR performed comparison VAISALA online humidity calculator (https://humiditycalculator.vaisala.com/), Density plots variable show distributions ConSciR computed values alongside VAISALA reference values. plots highlight areas agreement well systematic deviations. frost point function (calcFP) currently development shows less stability results, warranting caution use.","code":"vaisala_filepath <- data_file_path(\"mydata.xlsx\") vaisala_data <- readxl::read_excel(vaisala_filepath, sheet = \"VAISALA\", skip = 1)  vaisala <-    vaisala_data |>   mutate(     calcPws = calcPws(Temp, RH),     calcPw = calcPw(Temp, RH),                     calcAH = calcAH(Temp, RH),      calcDP = calcDP(Temp, RH),      calcFP = calcFP(Temp, RH),      calcMR = calcMR(Temp, RH),      calcAD = calcAD(Temp, RH),     calcEnthalpy = calcEnthalpy(Temp, RH)   )  vaisala |>   ggplot() +   geom_density(aes(Pws), color = \"darkblue\") +   geom_density(aes(calcPws), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcPws\", x = \"Saturation vapor pressure (hPa)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(Pw), color = \"darkblue\") +   geom_density(aes(calcPw), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcPw\", x = \"Water Vapour Pressure (hPa)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(AH), color = \"darkblue\") +   geom_density(aes(calcAH), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcAH\", x = \"Absolute Humidity (g/m^3)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(DP), color = \"darkblue\") +   geom_density(aes(calcDP), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcDP\", x = \"Dew Point (°C)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(FP), color = \"darkblue\") +   geom_density(aes(calcFP), color = \"red\") +   labs(title = \"calcFP - Function is unstable and under development\",         x = \"Frost Point (°C)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(MR), color = \"darkblue\") +   geom_density(aes(calcMR), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcMR\", x = \"Mixing Ratio (g/kg)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(AD), color = \"darkblue\") +   geom_density(aes(calcAD), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcAD\", x = \"Air Density (kg/m^3)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw() vaisala |>   ggplot() +   geom_density(aes(Enthalpy), color = \"darkblue\") +   geom_density(aes(calcEnthalpy), alpha = 0.5, color = \"skyblue\") +   labs(title = \"calcEnthalpy\", x = \"Enthalpy (kJ/kg)\", y = \"Density\",        subtitle = \"Difference between ConSciR calculated values and Vaisala Humidity Calculator\") +   theme_bw()"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Sustainability.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Sustainability","text":"mydata dataset contains environmental monitoring data collected example heritage sites. includes measurements temperature (°C) relative humidity (%) recorded sensors time. Example usage load dataset package:","code":"filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\")  head(mydata) #> # A tibble: 6 × 5 #>   Site   Sensor Date                 Temp    RH #>   <chr>  <chr>  <dttm>              <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2  mydata |> graph_TRH() + theme_bw() + labs(title = \"mydata\") + facet_grid(~Sensor)"},{"path":"https://bhavshah01.github.io/ConSciR/articles/Sustainability.html","id":"sustainability","dir":"Articles","previous_headings":"","what":"Sustainability","title":"Sustainability","text":"Use add_humidity_adjustments function calculate adjust humidity space using humidity funcitons. add_humidity_adjustments function applies humidity adjustment calculations based user-defined specifications temperature RH. Adjusted variables like newTemp_TRHadj newRH_TRHadj new temperature humidity values following heating, cooling, humidification dehumidification. energy estimate provided temperature adjustement (heating coooling). Adjustment humdity humidification dehumidification developed. Adjustment applying calculations add_humidity_adjustments function.   Energy Implications calculations sensible heating cooling power estimate energy required condition heritage spaces specified humidity temperature levels.    Comparing Environmental Specifications Using broader narrower environmental control specifications impacts energy consumption heritage risks. Narrow specification: 16-25°C 45-55%rh Broader specification: 12-28°C 30-70%rh    Combine datasets comparison add conservation risk metrics. Comparison risks energy savings made making specification broader.   Heritage Risk Indicators Summary metrics lifetime multiplier, preservation index, equilibrium moisture content (EMC) wood, mould risk indices provide quantitative assessment heritage risk different environmental control strategies. Lifetime multiplier - compared 20°C 50%rh, values >1 conditions prolong lifetime. Preservation index - years deterioration, higher values favorable. Equilibrium moisture content wood 6-20% - time spent within safer range (1 = 100%). Mould growth risk - lower values better. “Nothing” specification shows baseline risk levels zero energy consumption. Mould risk present relatively high preservation indicators (ironically outdoors). “Narrow Specifications” target tighter environmental ranges (e.g., 16-25°C 45-55% RH). tends slightly lower lifetime preservation indices indoors nothing. risk mould risk indoors decreases remains question significance. Energy consumption greater “Nothing” “Broader” specification. “Broader Specifications” wider acceptable temperature humidity range (e.g., 12-28°C 30-70% RH) typically maintain similar lifetime multipliers preservation indices narrow ranges indoors. energy consumption heating cooling required indoors, however humidification/dehumidification considered (developed). Mould risk remains similar “Nothing”. Limitations: Research required conservation risk metrics considered. example, stress-strain behavior materials relevant collections housed space. Assumed heating cooling 100% efficient instantaneous. calculations based time-series stamped data realistically managed rate. Establishing spaces behave fast efficiently heating/cooling systems introduce heat cooling space needs established. Humidification dehumification energy consumption models also need developed. Spaces typically conditioned directly physical calculations factors needed understand energy consumption (e.g. -coil chiller dew point, chilled water temperature, etc.).","code":"mydata_adj <-    mydata |>    group_by(Sensor) |>   add_humidity_adjustments(LowT = 16, HighT = 25, LowRH = 45, HighRH = 55) |>   mutate(     SensibleHeating = calcSensibleHeating(Temp, newTemp_TRHadj, RH, volumeFlowRate = 0.5),     CoolingPower = calcCoolingPower(Temp, newTemp_TRHadj, RH, newRH_TRHadj, volumeFlowRate = 0.5)   )  glimpse(mydata_adj) #> Rows: 105,408 #> Columns: 38 #> Groups: Sensor [3] #> $ Site            <chr> \"London\", \"London\", \"London\", \"London\", \"London\", \"Lon… #> $ Sensor          <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Roo… #> $ Date            <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 … #> $ Temp            <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, … #> $ RH              <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2, 36.3, 36.4, 36.0, … #> $ AH              <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670, 6.89… #> $ DP              <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529, 6.05… #> $ TRH_within      <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ T_lower         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ T_higher        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ RH_lower        <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, … #> $ RH_higher       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ zone            <chr> \"Hum or cooling\", \"Hum or cooling\", \"Hum or cooling\", … #> $ TRH_zone        <chr> \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\"… #> $ T_zone          <chr> \"Within\", \"Within\", \"Within\", \"Within\", \"Within\", \"Wit… #> $ RH_zone         <chr> \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\"… #> $ dTemp           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ dRH             <dbl> -8.2, -8.3, -8.4, -8.4, -8.5, -8.8, -8.7, -8.6, -9.0, … #> $ newTemp_TRHadj  <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, … #> $ newAH_TRHadj    <dbl> 8.623877, 8.623877, 8.623877, 8.574250, 8.574250, 8.57… #> $ dTemp_TRHadj    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ dAH_TRHadj      <dbl> 1.571462, 1.590626, 1.609790, 1.600527, 1.619581, 1.67… #> $ newRH_TRHadj    <dbl> 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45… #> $ dRH_TRHadj      <dbl> 8.2, 8.3, 8.4, 8.4, 8.5, 8.8, 8.7, 8.6, 9.0, 9.0, 9.2,… #> $ newAH_AHadj     <dbl> 8.623877, 8.623877, 8.623877, 8.574250, 8.574250, 8.57… #> $ dAH_AHadj       <dbl> 1.571462, 1.590626, 1.609790, 1.600527, 1.619581, 1.67… #> $ newRH_AHadj     <dbl> 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45… #> $ dRH_AHadj       <dbl> 8.2, 8.3, 8.4, 8.4, 8.5, 8.8, 8.7, 8.6, 9.0, 9.0, 9.2,… #> $ newTemp_AHadj   <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7, 21.7, 21.7, 21.7, … #> $ dTemp_AHadj     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ newTemp_Tadj    <dbl> 18.54655, 18.50309, 18.45953, 18.36203, 18.31840, 18.1… #> $ dTemp_Tadj      <dbl> -3.253447, -3.296908, -3.340472, -3.337966, -3.381603,… #> $ newRH_Tadj      <dbl> 44.50688, 44.50032, 44.49374, 44.49407, 44.48749, 44.4… #> $ dRH_Tadj        <dbl> 7.706876, 7.800316, 7.893740, 7.894074, 7.987487, 8.26… #> $ newAH_Tadj      <dbl> 5.831209, 5.800415, 5.769701, 5.736456, 5.705996, 5.61… #> $ dAH_Tadj        <dbl> -1.221207, -1.232836, -1.244386, -1.237268, -1.248673,… #> $ SensibleHeating <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ CoolingPower    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … graph_psychrometric(mydata_adj, y_func = calcAH, data_col = \"TRH_zone\",                     LowT = 16, HighT = 25, LowRH = 45, HighRH = 55) +     facet_wrap(~Sensor) +    labs(title = \"Before TRH Adjustment\", subtitle = \"mydata\", col = \"\") +    theme_classic() mydata_adj |>   graph_psychrometric(Temp = \"newTemp_TRHadj\", RH = \"newRH_TRHadj\",                        y_func = calcAH, data_col = \"zone\",                       LowT = 16, HighT = 25, LowRH = 45, HighRH = 55) +   labs(title = \"After TRH Adjustment - narrow specification\",         subtitle = \"Adjusted to 16-25°C and 45-55%RH\",        col = \"\") +     facet_grid(~Sensor) +    theme_classic() # Plot the temperature changes required to achieve target conditions  mydata_adj |>   ggplot() +   geom_line(aes(Date, dTemp_TRHadj), col = \"firebrick\", alpha = 0.8) +    geom_smooth(aes(Date, dTemp_TRHadj)) +    labs(title = \"Temperature change required to achieve Narrow TRH specification\",        subtitle = \"Positive values indicate increasing the temperature\",        x = NULL, y = \"Temperature (°C)\") +   facet_grid(~Sensor) +    theme_bw() mydata_adj |>   ggplot() +   geom_line(aes(Date, SensibleHeating), col = \"deeppink\") +    labs(x = NULL, y = \"Sensible heat (kW)\",         title = \"Sensible Heating\", subtitle = \"Narrow: 16-25°C, 45-55%RH\") +   facet_grid(~Sensor) +    theme_bw() mydata_adj |>   ggplot() +   geom_line(aes(Date, CoolingPower), col = \"dodgerblue\") +   labs(x = NULL, y = \"Cooling power (kW)\",         title = \"Cooling Power\", subtitle = \"Narrow: 16-25°C, 45-55%RH\") +   facet_grid(~Sensor) +    theme_bw() mydata_adj2 <-    mydata |>    group_by(Sensor) |>   add_humidity_adjustments(LowT = 12, HighT = 28, LowRH = 30, HighRH = 70) |>   mutate(     SensibleHeating = calcSensibleHeating(Temp, newTemp_TRHadj, RH, volumeFlowRate = 0.5),     CoolingPower = calcCoolingPower(Temp, newTemp_TRHadj, RH, newRH_TRHadj, volumeFlowRate = 0.5)   )  mydata_adj2 |>   graph_psychrometric(Temp = \"newTemp_TRHadj\", RH = \"newRH_TRHadj\",                        y_func = calcAH, data_col = \"zone\",                       LowT = 12, HighT = 28, LowRH = 30, HighRH = 70) +   labs(title = \"After TRH Adjustment - broader specification\",         subtitle = \"Adjusted to 12-28°C, 30-70%RH\",        col = \"\") +     facet_grid(~Sensor) +    theme_classic() mydata_adj2 |>   ggplot() +   geom_line(aes(Date, SensibleHeating), col = \"deeppink\") +    labs(x = NULL, y = \"Sensible heat (kW)\",         title = \"Sensible Heating - broader specification\", subtitle = \"Adjusted to 12-28°C, 30-70%RH\") +   facet_grid(~Sensor) +    theme_bw() mydata_adj2 |>   ggplot() +   geom_line(aes(Date, CoolingPower), col = \"dodgerblue\") +   labs(x = NULL, y = \"Cooling power (kW)\",         title = \"Cooling Power - broader specification\", subtitle = \"Adjusted to 12-28°C, 30-70%RH\") +   facet_grid(~Sensor) +    theme_bw() mydata_no_adj <-    mydata |>   # Doing nothing costs no energy   mutate(     SensibleHeating = 0, CoolingPower = 0   ) |>   add_conservation_calcs()  mydata_adj <-    mydata_adj |>   add_conservation_calcs(Temp = \"newTemp_TRHadj\", RH = \"newRH_TRHadj\")  mydata_adj2 <-    mydata_adj2 |>   add_conservation_calcs(Temp = \"newTemp_TRHadj\", RH = \"newRH_TRHadj\")  mydata_bind <-    bind_rows(     mydata_no_adj |> mutate(Specification = \"1) Do Nothing\"),     mydata_adj |> mutate(Specification = \"2) Narrow Specs\"),      mydata_adj2 |> mutate(Specification = \"3) Broader Specs\")) mydata_bind |>   ggplot() +   geom_col(aes(fct_rev(Specification), CoolingPower), fill = \"dodgerblue3\") +   coord_flip() +   facet_grid(Sensor ~ .) +    labs(title = \"Cooling required to adjust TRH\", subtitle = \"Narrow vs Broader specifications\",        x = NULL, y = \"Sum of energy required (kW)\") +   theme_classic() mydata_bind |>   ggplot() +   geom_col(aes(fct_rev(Specification), SensibleHeating), fill = \"deeppink3\") +   coord_flip() +   facet_grid(Sensor ~ .) +    labs(title = \"Heating required to adjust TRH\", subtitle = \"Narrow vs Broader specifications\",        x = NULL, y = \"Sum of energy required (kW)\") +    theme_classic() mydata_summary <-    mydata_bind |>   group_by(Sensor, Specification) |>   summarise(     Lifetime = mean(Lifetime, na.rm = TRUE),      PreservationIndex = mean(PreservationIndex, na.rm = TRUE),      EMC_wood = mean(EMC_wood >= 6 & EMC_wood <= 20, na.rm = TRUE),      Mould_LIM = sum(RH > Mould_LIM, na.rm = TRUE),     Mould_index = sum(Mould_index, na.rm = TRUE)   )  mydata_summary #> # A tibble: 9 × 7 #> # Groups:   Sensor [3] #>   Sensor Specification Lifetime PreservationIndex EMC_wood Mould_LIM Mould_index #>   <chr>  <chr>            <dbl>             <dbl>    <dbl>     <int>       <dbl> #> 1 Exter… 1) Do Nothing    0.912              89.5    0.935      8497     141.    #> 2 Exter… 2) Narrow Sp…    0.993              54.7    1         13122       0.953 #> 3 Exter… 3) Broader S…    0.952              72.5    1.000     11226      17.5   #> 4 Room 1 1) Do Nothing    1.04               43.7    0.978         4       0.502 #> 5 Room 1 2) Narrow Sp…    1.01               39.3    1             6       0.157 #> 6 Room 1 3) Broader S…    1.04               43.5    1             6       0.465 #> 7 Room … 1) Do Nothing    1.07               42.1    0.971         0       0.140 #> 8 Room … 2) Narrow Sp…    1.02               37.3    1             0       0.135 #> 9 Room … 3) Broader S…    1.06               42.0    1             0       0.140"},{"path":"https://bhavshah01.github.io/ConSciR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bhavesh Shah. Author, maintainer, copyright holder. Annelies Cosaert. Author. Vincent Beltran. Author. Emily R Long. Contributor. Marcin Zygmunt. Contributor. Hebe Halstead. Contributor. Avery Bazemore. Contributor.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shah B, Cosaert , Beltran V (2025). ConSciR: Tools Conservation Science. R package version 0.3.0.9000, https://bhavshah01.github.io/ConSciR/.","code":"@Manual{,   title = {ConSciR: Tools for Conservation Science},   author = {Bhavesh Shah and Annelies Cosaert and Vincent Beltran},   year = {2025},   note = {R package version 0.3.0.9000},   url = {https://bhavshah01.github.io/ConSciR/}, }"},{"path":"https://bhavshah01.github.io/ConSciR/index.html","id":"conscir","dir":"","previous_headings":"","what":"Tools for Conservation Science","title":"Tools for Conservation Science","text":"ConSciR provides tools analysis cultural heritage preventive conservation data. includes functions environmental data analysis, humidity calculations, sustainability metrics, conservation risks, data visualisations psychrometric charts. designed support conservators, scientists, engineers streamlining common calculations tasks encountered heritage conservation workflows. package motivated framework outlined Cosaert Beltran et al. (2022) “Tools Analysis Collection Environments” “Tools Analysis Collection Environments”. ConSciR intended : - Conservators working museums, galleries, heritage sites - Conservation scientists, engineers, researchers - Data scientists developing applications conservation - Cultural heritage professionals involved preventive conservation - Students educators conservation heritage science programmes package also designed : - FAIR: Findable, Accessible, Interoperable, Reusable - Collaborative: enabling contributions, feature requests, bug reports, additions wider community using R first time, read article : Using R first time","code":""},{"path":"https://bhavshah01.github.io/ConSciR/index.html","id":"tools","dir":"","previous_headings":"","what":"Tools","title":"Tools for Conservation Science","text":"Humidity calculations, conservator tools, sustainability metrics. Mould growth models damage risk functions. Graphical outputs including temperature-relative humidity (TRH) plots, psychrometric charts data applications. Data tidying functions compatible Meaco Hanwell environmental monitoring devices. Interactive Shiny applications enabling dynamic data exploration visualisation.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/index.html","id":"install-and-load","dir":"","previous_headings":"","what":"Install and load","title":"Tools for Conservation Science","text":"can install development version package GitHub using pak package: full details functions, see package Reference manual.","code":"install.packages(\"ConSciR\") library(ConSciR) install.packages(\"pak\") pak::pak(\"BhavShah01/ConSciR\")  # Alternatively # install.packages(\"devtools\") # devtools::install_github(\"BhavShah01/ConSciR\")"},{"path":"https://bhavshah01.github.io/ConSciR/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for Conservation Science","text":"section demonstrates common tasks can perform ConSciR package. Load packages Load ConSciR commonly used tidyverse packages data manipulation plotting. Access example dataset pre-loaded dataset (mydata) included testing demonstration. Use head() view first rows inspect data structure. Users can rename columns structure datasets similarly mydata ensure compatibility ConSciR functions, expect variables temperature relative humidity specific column names. Perform calculations data Use ConSciR functions add metrics dew point, absolute humidity, mould, preservation index others dataset. functions available; see package Reference details. Combine analysis visualisation Add dew point line temperature-relative humidity graph using package’s built-plotting function graph_TRH().  Conservator tools: mould growth estimation Calculate mould growth risk using calcMould_Zeng() function visualise alongside humidity data.  Graphs: generate psychrometric chart Visualise data using psychrometric chart function graph_psychrometric(). example shows basic plot can customised; data transparency, temperature humidity ranges, y-axis function.","code":"library(ConSciR) library(dplyr) library(ggplot2) # My TRH data filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\") mydata <- mydata |> filter(Sensor == \"Room 1\")  head(mydata) #> # A tibble: 6 × 5 #>   Site   Sensor Date                 Temp    RH #>   <chr>  <chr>  <dttm>              <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5 #> 6 London Room 1 2024-01-01 01:14:59  21.7  36.2 # Peform calculations head(mydata) |>   mutate(     # Dew point     DewP = calcDP(Temp, RH),           # Absolute humidity     Abs = calcAH(Temp, RH),           # Mould risk      Mould = ifelse(RH > calcMould_Zeng(Temp, RH), \"Mould risk\", \"No mould\"),           # Preservation Index, years to deterioration      PI = calcPI(Temp, RH),           # Scenario: Humidity if the temperature was 2°C higher     RH_if_2C_higher = calcRH_AH(Temp + 2, Abs)      ) |>   glimpse() #> Rows: 6 #> Columns: 10 #> $ Site            <chr> \"London\", \"London\", \"London\", \"London\", \"London\", \"Lon… #> $ Sensor          <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Roo… #> $ Date            <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 … #> $ Temp            <dbl> 21.8, 21.8, 21.8, 21.7, 21.7, 21.7 #> $ RH              <dbl> 36.8, 36.7, 36.6, 36.6, 36.5, 36.2 #> $ DewP            <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529, 6.05… #> $ Abs             <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670, 6.89… #> $ Mould           <chr> \"No mould\", \"No mould\", \"No mould\", \"No mould\", \"No mo… #> $ PI              <dbl> 45.25849, 45.38181, 45.50580, 46.07769, 46.20393, 46.5… #> $ RH_if_2C_higher <dbl> 32.81971, 32.73052, 32.64134, 32.63838, 32.54920, 32.2… mydata |>   mutate(DewPoint = calcDP(Temp, RH)) |>   graph_TRH() +    geom_line(aes(Date, DewPoint), col = \"cyan3\") + # add dew point    theme_bw() mydata |>   mutate(Mould = calcMould_Zeng(Temp, RH)) |>   ggplot() +   geom_line(aes(Date, RH), col = \"royalblue3\") +   geom_line(aes(Date, Mould), col = \"darkorchid\", size = 1) +   labs(title = \"Mould Growth Rate Limits\",         subtitle = \"Mould growth initiates when RH goes above threshold\",        x = NULL, y = \"Humidity (%)\") +   facet_grid(~Sensor) +    theme_classic(base_size = 14) # Customise  mydata |>   graph_psychrometric(     data_alpha = 0.2,     LowT = 8,      HighT = 28,     LowRH = 30,     HighRH = 70,     y_func = calcAH     ) +   theme_classic() +    labs(title = \"Psychrometric chart\")"},{"path":"https://bhavshah01.github.io/ConSciR/reference/ConSciR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ConSciR: Tools for Conservation Science — ConSciR-package","title":"ConSciR: Tools for Conservation Science — ConSciR-package","text":"Provides data science tools conservation science, including methods environmental data analysis, humidity calculations, sustainability metrics, engineering calculations, data visualisation. Supports conservators, scientists, engineers working cultural heritage preventive conservation data. package motivated framework outlined Cosaert Beltran et al. (2022) \"Tools Analysis Collection Environments\" https://www.getty.edu/conservation/publications_resources/pdf_publications/tools_for_the_analysis_of_collection_environments.html.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/ConSciR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ConSciR: Tools for Conservation Science — ConSciR-package","text":"Maintainer: Bhavesh Shah bhaveshshah01@gmail.com (ORCID) [copyright holder] Authors: Annelies Cosaert (ORCID) Vincent Beltran contributors: Emily R Long (ORCID) [contributor] Marcin Zygmunt (ORCID) [contributor] Hebe Halstead [contributor] Avery Bazemore (ORCID) [contributor]","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/TRHdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Climate dataset to demonstrate functions — TRHdata","title":"Climate dataset to demonstrate functions — TRHdata","text":"climate dataset use demonstrate functions work.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/TRHdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climate dataset to demonstrate functions — TRHdata","text":"","code":"TRHdata"},{"path":"https://bhavshah01.github.io/ConSciR/reference/TRHdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Climate dataset to demonstrate functions — TRHdata","text":"data frame 35,136 rows 5 columns: Site, Sensor Sensor location name Date Date ISOdate time format Temp, RH Temperature (C) relative humidity (%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/TRHdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Climate dataset to demonstrate functions — TRHdata","text":"Climate","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_conservation_calcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","title":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","text":"Appends columns conservation-risks: mould risk, preservation indices, equilibrium moisture, moisture content wood dataframe temperature relative humidity columns.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_conservation_calcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","text":"","code":"add_conservation_calcs(mydata, Temp = \"Temp\", RH = \"RH\", ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_conservation_calcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","text":"mydata dataframe containing temperature relative humidity data. Temp Character string name temperature column (default \"Temp\"). RH Character string name relative humidity column (default \"RH\"). ... Additional parameters passed humidity calculation functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_conservation_calcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","text":"Dataframe augmented conservation variables: Mould_LIM Mould risk threshold humidity Zeng equation (numeric). Mould_risk risk mould Zeng equation.      Adds label: \"Mould risk\" \"risk\". Mould_rate Mould growth rate index Zeng equation, labelled output. Mould_index Mould risk index VTT model (continuous scale). PreservationIndex Preservation Index collection longevity. Lifetime Lifetime Multiplier object material degradation risk. EMC_wood Wood equilibrium moisture content (%) current climate conditions.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_conservation_calcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Conservation calculations to temperature and humidity data — add_conservation_calcs","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> add_conservation_calcs() |> dplyr::glimpse() #> Rows: 5 #> Columns: 12 #> $ Site              <chr> \"London\", \"London\", \"London\", \"London\", \"London\" #> $ Sensor            <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\" #> $ Date              <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01… #> $ Temp              <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ RH                <dbl> 36.8, 36.7, 36.6, 36.6, 36.5 #> $ Mould_LIM         <dbl> 75.11542, 75.11542, 75.11542, 75.14014, 75.14014 #> $ Mould_risk        <chr> \"No risk\", \"No risk\", \"No risk\", \"No risk\", \"No risk\" #> $ Mould_rate        <dbl> 0, 0, 0, 0, 0 #> $ Mould_index       <dbl> 0, 0, 0, 0, 0 #> $ PreservationIndex <dbl> 45.25849, 45.38181, 45.50580, 46.07769, 46.20393 #> $ Lifetime          <dbl> 1.107855, 1.108860, 1.109869, 1.109854, 1.110866 #> $ EMC_wood          <dbl> 7.201471, 7.186361, 7.171247, 7.173308, 7.158186"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_adjustments.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","title":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","text":"function processes dataframe temperature relative humidity data, computes humidity-related variables, classifies data climate control zones. generates adjusted temperature humidity values based specified thresholds.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_adjustments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","text":"","code":"add_humidity_adjustments(   mydata,   Temp = \"Temp\",   RH = \"RH\",   LowT = 16,   HighT = 25,   LowRH = 40,   HighRH = 60,   P_atm = 1013.25,   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_adjustments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","text":"mydata dataframe containing temperature relative humidity data. Temp Character string name temperature column (default \"Temp\"). RH Character string name relative humidity column (default \"RH\"). LowT Numeric lower temperature threshold (default 16). HighT Numeric higher temperature threshold (default 25). LowRH Numeric lower relative humidity threshold (default 40). HighRH Numeric higher relative humidity threshold (default 60). P_atm Atmospheric pressure kPa hPa (currently unused, default 1013.25). ... Additional arguments passed internal calculation functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_adjustments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","text":"input dataframe augmented multiple humidity temperature adjustment columns. AH Absolute Humidity (g/m³): mass water vapor per unit volume air. DP Dew Point (°C): temperature air becomes saturated water vapor condenses. zone Categorical variable defining climate control actions based temperature RH:      'Heating ', 'Dehum heating', 'Cooling hum', etc. TRH_zone Temperature-relative humidity category:      'Hot', 'Cold', 'Dry', 'Hot humid', etc. T_zone Temperature zone classification: 'Cold', 'Within', 'Hot'. RH_zone Relative humidity zone classification: 'Dry', 'Within', 'Humid'. dTemp Temperature difference specified thresholds (°C),      indicating required heating cooling. dRH Relative humidity difference specified thresholds (%),      indicating humidification dehumidification. newTemp_TRHadj Adjusted temperature (°C) applying temperature relative humidity      correction based zone. newAH_TRHadj Adjusted absolute humidity (g/m³). newRH_TRHadj Adjusted relative humidity (%) reflecting new temperature absolute humidity. dTemp_TRHadj, dAH_TRHadj, dRH_TRHadj Differences adjusted original temperature, absolute humidity,      relative humidity respectively. newTemp_AHadj, newAH_AHadj, newRH_AHadj Adjustments based absolute humidity (.e. dehumidification humidification). newTemp_Tadj, newRH_Tadj, newAH_Tadj Adjustments based temperature (.e. heating cooling).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_adjustments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Humidity with temperature and/or absolute humidity, RH zones and Energy costs — add_humidity_adjustments","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> add_humidity_adjustments() |> dplyr::glimpse() #> Rows: 5 #> Columns: 36 #> $ Site           <chr> \"London\", \"London\", \"London\", \"London\", \"London\" #> $ Sensor         <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\" #> $ Date           <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00… #> $ Temp           <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ RH             <dbl> 36.8, 36.7, 36.6, 36.6, 36.5 #> $ AH             <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670 #> $ DP             <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529 #> $ TRH_within     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE #> $ T_lower        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE #> $ T_higher       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE #> $ RH_lower       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE #> $ RH_higher      <lgl> FALSE, FALSE, FALSE, FALSE, FALSE #> $ zone           <chr> \"Hum or cooling\", \"Hum or cooling\", \"Hum or cooling\", \"… #> $ TRH_zone       <chr> \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\" #> $ T_zone         <chr> \"Within\", \"Within\", \"Within\", \"Within\", \"Within\" #> $ RH_zone        <chr> \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\" #> $ dTemp          <dbl> 0, 0, 0, 0, 0 #> $ dRH            <dbl> -3.2, -3.3, -3.4, -3.4, -3.5 #> $ newTemp_TRHadj <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ newAH_TRHadj   <dbl> 7.665669, 7.665669, 7.665669, 7.621556, 7.621556 #> $ dTemp_TRHadj   <dbl> 0, 0, 0, 0, 0 #> $ dAH_TRHadj     <dbl> 0.6132535, 0.6324177, 0.6515818, 0.6478322, 0.6668861 #> $ newRH_TRHadj   <dbl> 40, 40, 40, 40, 40 #> $ dRH_TRHadj     <dbl> 3.2, 3.3, 3.4, 3.4, 3.5 #> $ newAH_AHadj    <dbl> 7.665669, 7.665669, 7.665669, 7.621556, 7.621556 #> $ dAH_AHadj      <dbl> 0.6132535, 0.6324177, 0.6515818, 0.6478322, 0.6668861 #> $ newRH_AHadj    <dbl> 40, 40, 40, 40, 40 #> $ dRH_AHadj      <dbl> 3.2, 3.3, 3.4, 3.4, 3.5 #> $ newTemp_AHadj  <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ dTemp_AHadj    <dbl> 0, 0, 0, 0, 0 #> $ newTemp_Tadj   <dbl> 20.44169, 20.39760, 20.35340, 20.25449, 20.21022 #> $ dTemp_Tadj     <dbl> -1.358305, -1.402398, -1.446596, -1.445507, -1.489777 #> $ newRH_Tadj     <dbl> 39.81656, 39.81062, 39.80466, 39.80479, 39.79882 #> $ dRH_Tadj       <dbl> 3.016562, 3.110618, 3.204660, 3.204791, 3.298824 #> $ newAH_Tadj     <dbl> 6.518114, 6.483705, 6.449385, 6.412250, 6.378215 #> $ dAH_Tadj       <dbl> -0.5343015, -0.5495458, -0.5647019, -0.5614733, -0.576…"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_calcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","title":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","text":"function adds several humidity variables dataframe temperature relative humidity columns. uses humidity functions (e.g., calcPws, calcPw).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_calcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","text":"","code":"add_humidity_calcs(mydata, Temp = \"Temp\", RH = \"RH\", P_atm = 1013.25, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_calcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","text":"mydata dataframe containing temperature relative humidity data. Temp Character string name temperature column (default \"Temp\"). RH Character string name relative humidity column (default \"RH\"). P_atm Atmospheric pressure (hPa), default 1013.25. ... Additional parameters passed humidity calculation functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_calcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","text":"input dataframe augmented columns vapor pressure, dew point, absolute humidity,   air density, mixing ratio, specific humidity, enthalpy. Pws Saturated vapour pressure given temperature (hPa). Pw Partial pressure water vapour present (hPa). DP Dew Point, condensation temperature based RH (°C). AH Mass water vapour per air volume (g/m³). AD Moist air density (kg/m³). MR Ratio water vapour dry air mass (g/kg). SH Ratio water vapour total air mass (g/kg). Enthalpy Total enthalpy, h, air-vapour mixture (kJ/kg).","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_humidity_calcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Humidity calculations to temperature and humidity data — add_humidity_calcs","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> add_humidity_calcs() |> dplyr::glimpse() #> Rows: 5 #> Columns: 13 #> $ Site     <chr> \"London\", \"London\", \"London\", \"London\", \"London\" #> $ Sensor   <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\" #> $ Date     <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00:29:59… #> $ Temp     <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ RH       <dbl> 36.8, 36.7, 36.6, 36.6, 36.5 #> $ Pws      <dbl> 26.12119, 26.12119, 26.12119, 25.96205, 25.96205 #> $ Pw       <dbl> 9.612598, 9.586477, 9.560356, 9.502110, 9.476148 #> $ DP       <dbl> 6.383970, 6.344456, 6.304848, 6.216205, 6.176529 #> $ AH       <dbl> 7.052415, 7.033251, 7.014087, 6.973723, 6.954670 #> $ AD       <dbl> 1.192445, 1.192457, 1.192469, 1.192899, 1.192911 #> $ MR       <dbl> 5.957278, 5.940935, 5.924593, 5.888156, 5.871916 #> $ SH       <dbl> 0.8562656, 0.8559272, 0.8555872, 0.8548233, 0.8544802 #> $ Enthalpy <dbl> 37.15665, 37.11512, 37.07359, 36.87888, 36.83762"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Time Variables — add_time_vars","title":"Add Time Variables — add_time_vars","text":"function adds multiple time-related variables dataframe Date column. creates standard factors season, month-year, day-hour, determines summer/winter. also allows flexible specification summer winter start/end dates, custom time period.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Time Variables — add_time_vars","text":"","code":"add_time_vars(   mydata,   Date = \"Date\",   openair_vars = c(\"seasonyear\", \"season\", \"monthyear\", \"daylight\"),   summer_start = \"04-15\",   summer_end = \"10-15\",   period_start = NULL,   period_end = NULL,   period_label = \"Period\",   latitude = 51,   longitude = -0.5,   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Time Variables — add_time_vars","text":"mydata dataframe containing date/time column labelled \"Date\" \"Sensor\" column. Date name date/time column `mydata` (default \"Date\"). openair_vars Variables `openair::cutData()` add (default includes seasonyear, season, monthyear, daylight). summer_start Start date summer season \"MM-DD\" format full date (default \"04-15\"). summer_end End date summer season \"MM-DD\" format full date (default \"10-15\"). period_start Start date custom period \"MM-DD\" format full date (optional). period_end End date custom period \"MM-DD\" format full date (optional). period_label Label assign dates within custom period, e.g. Exhibition property open/closed public (default \"Period\"). latitude Latitude daylight calculations (default 51). longitude Longitude daylight calculations (default -0.5). ... Additional arguments passed `openair::cutData()`.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Time Variables — add_time_vars","text":"data frame additional time-related columns appended: seasonyear Combined year season factor created openair::cutData();          useful seasonal analyses. season Season factor (e.g., Spring, Summer) openair::cutData(). monthyear Factor combining month year, created openair::cutData()          assist month-based grouping. daylight Boolean factor indicating daylight presence/absence,          derived using openair::cutData() latitude longitude inputs. day Date part timestamp, rounded day boundary, useful daily aggregation. hour Hour day extracted datetime. dayhour Datetime floored hour; useful hourly time series analysis. weekday Weekday name/factor, abbreviated, extracted date. month Month number labelled factor version; useful calendar-based grouping. year Year extracted datetime annual analyses. DayYear Date current year month day taken          original date; used assign seasons periods relative current year. Summer factor (\"Summer\" \"Winter\") determined comparison DayYear          user-defined summer_start summer_end dates,          custom seasonality modelling. Period Character flag identifying whether date falls within user-defined          custom period (e.g., exhibition), labelled period_label.          Returns NA period defined.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Time Variables — add_time_vars","text":"variables seasonyear, season, monthyear, daylight created using openair::cutData() function internally rely geographic coordinates (latitude, longitude) calculate daylight status. sure openair installed loaded variables.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/add_time_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Time Variables — add_time_vars","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>   add_time_vars(period_start = \"05-01\", period_end = \"06-30\", period_label = \"Exhibition\") |>   dplyr::glimpse() #> Rows: 5 #> Columns: 19 #> $ Site       <chr> \"London\", \"London\", \"London\", \"London\", \"London\" #> $ Sensor     <chr> \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\", \"Room 1\" #> $ date       <dttm> 2024-01-01 00:00:00, 2024-01-01 00:15:00, 2024-01-01 00:29:… #> $ Temp       <dbl> 21.8, 21.8, 21.8, 21.7, 21.7 #> $ RH         <dbl> 36.8, 36.7, 36.6, 36.6, 36.5 #> $ seasonyear <ord> winter (DJF) - 2024, winter (DJF) - 2024, winter (DJF) - 20… #> $ season     <ord> winter (DJF), winter (DJF), winter (DJF), winter (DJF), wi… #> $ monthyear  <ord> January 2024, January 2024, January 2024, January 2024, Jan… #> $ daylight   <fct> nighttime, nighttime, nighttime, nighttime, nighttime #> $ day        <dttm> 2024-01-01, 2024-01-01, 2024-01-01, 2024-01-01, 2024-01-01 #> $ hour       <int> 0, 0, 0, 0, 0 #> $ dayhour    <dttm> 2024-01-01, 2024-01-01, 2024-01-01, 2024-01-01, 2024-01-01 #> $ weekday    <ord> Mon, Mon, Mon, Mon, Mon #> $ Month      <dbl> 1, 1, 1, 1, 1 #> $ month      <ord> Jan, Jan, Jan, Jan, Jan #> $ year       <dbl> 2024, 2024, 2024, 2024, 2024 #> $ DayYear    <date> 2025-01-01, 2025-01-01, 2025-01-01, 2025-01-01, 2025-01-01 #> $ Summer     <chr> \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\" #> $ Period     <chr> \"Outside Exhibition\", \"Outside Exhibition\", \"Outside Exhibi…"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAD.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Air Density — calcAD","title":"Calculate Air Density — calcAD","text":"Function calculate air density based temperature (°C), relative humidity (%), atmospheric pressure (hPa).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Air Density — calcAD","text":"","code":"calcAD(Temp, RH, P_atm = 1013.25, R_dry = 287.058, R_vap = 461.495, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Air Density — calcAD","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) P_atm Atmospheric pressure = 1013.25 (hPa) R_dry Specific gas constant dry air = 287.058 (J/(kg·K)) R_vap Specific gas constant water vapor = 461.495 (J/(kg·K)) ... Addtional arguments  supply calcPws","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Air Density — calcAD","text":"Air density kg/m³","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Air Density — calcAD","text":"","code":"# Air density at 20°C (Temp) and 50% relative humidity (RH) calcAD(20, 50) #> [1] 1.198833   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(AirDensity = calcAD(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH AirDensity #>   <chr>  <chr>  <dttm>              <dbl> <dbl>      <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8       1.19 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7       1.19 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6       1.19 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6       1.19 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5       1.19"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAH.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Absolute Humidity — calcAH","title":"Calculate Absolute Humidity — calcAH","text":"Function calculate absolute humidity (g/m³) temperature (°C) relative humidity (%). Supports multiple methods: Buck equation (default), Buck formula enhancement factor, others.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Absolute Humidity — calcAH","text":"","code":"calcAH(   Temp,   RH,   P_atm = 1013.25,   method = c(\"Buck_EF\", \"Buck\", \"IAPWS\", \"Magnus\", \"VAISALA\") )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Absolute Humidity — calcAH","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) P_atm Atmospheric pressure = 1013.25 (hPa) method Character. Calculation method: - \"Buck\": uses calcPws Buck equation (default) - \"Buck_EF\": Buck formula enhancement factor - \"IAPWS\", \"Magnus\", \"VAISALA\": use calcPws methods saturation vapor pressure","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Absolute Humidity — calcAH","text":"AH Absolute Humidity (g/m³)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcAH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Absolute Humidity — calcAH","text":"","code":"# Absolute humidity at 20°C (Temp) and 50% relative humidity (RH) calcAH(20, 50) #> [1] 8.630534 calcAH(20, 50, method = \"Buck_EF\") # Buck formula with enhancement factor (default) #> [1] 8.630534 calcAH(20, 50, method = \"Buck\") # Buck method via calcPws #> [1] 8.642036 calcAH(20, 50, method = \"IAPWS\") # IAPWS #> [1] 8.645191  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(Abs = calcAH(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH   Abs #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  7.05 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  7.03 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  7.01 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  6.97 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  6.95"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingCapacity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cooling Capacity — calcCoolingCapacity","title":"Calculate Cooling Capacity — calcCoolingCapacity","text":"function calculates required cooling capacity based power consumption, power factor, safety factor, efficiency. Cooling capacity amount energy transferred cooling process.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingCapacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cooling Capacity — calcCoolingCapacity","text":"","code":"calcCoolingCapacity(   Power,   power_factor = 0.85,   safety_factor = 1.2,   efficiency = 0.7 )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingCapacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cooling Capacity — calcCoolingCapacity","text":"Power Power consumption Watts (W). power_factor Power factor, default 0.85. safety_factor Safety factor, default 1.2 (20% extra capacity). efficiency Efficiency cooling system, default 0.7 (70%).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingCapacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cooling Capacity — calcCoolingCapacity","text":"Required cooling capacity kilowatts (kW).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingCapacity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cooling Capacity — calcCoolingCapacity","text":"","code":"calcCoolingCapacity(1000) #> [1] 1.457143  calcCoolingCapacity(1500, power_factor = 0.9, safety_factor = 1.3, efficiency = 0.8) #> [1] 2.19375"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cooling Power — calcCoolingPower","title":"Calculate Cooling Power — calcCoolingPower","text":"function calculates cooling power based initial final air conditions volume flow rate. Cooling power rate energy transferred cooling process.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cooling Power — calcCoolingPower","text":"","code":"calcCoolingPower(Temp1, Temp2, RH1, RH2, volumeFlowRate)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cooling Power — calcCoolingPower","text":"Temp1 Initial Temperature (°Celsius) Temp2 Final Temperature (°Celsius) RH1 Initial Relative Humidity (0-100%) RH2 Final Relative Humidity (0-100%) volumeFlowRate Volume flow rate air (m³/s)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cooling Power — calcCoolingPower","text":"Cooling power kilowatts (kW)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Cooling Power — calcCoolingPower","text":"ASHRAE Handbook Fundamentals","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcCoolingPower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cooling Power — calcCoolingPower","text":"","code":"calcCoolingPower(30, 22, 70, 55, 0.8) #> [1] 0.03049663  calcCoolingPower(Temp1 = 25, Temp2 = 20, RH1 = 70, RH2 = 50, volumeFlowRate = 0.5) #> [1] 0.01296257"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dew Point — calcDP","title":"Calculate Dew Point — calcDP","text":"Function calculate dew point (°C) temperature (°C) relative humidity (%). dew point temperature air becomes saturated moisture water vapour begins condense.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dew Point — calcDP","text":"","code":"calcDP(Temp, RH, method = c(\"Magnus\", \"Buck\"))"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dew Point — calcDP","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) method Character; formula use, either \"Magnus\" \"Buck\". Defaults \"Magnus\".","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dew Point — calcDP","text":"Td (DP), Dew Point (°Celsius)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Dew Point — calcDP","text":"function supports two methods dew point calculation: \"Magnus\" (default): Uses August-Roche-Magnus approximation,   valid 0°C < Temp < 60°C 1% < RH < 100%. \"Buck\": Uses Arden Buck equation Bögel modification,   valid -30°C < Temp < 60°C 1% < RH < 100%. methods compute saturation vapour pressure convert relative humidity dew point temperature. Magnus method chosen default stable used calcTemp calcRH_DP functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Dew Point — calcDP","text":"details equations also available source R code.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Dew Point — calcDP","text":"Alduchov, O. ., R. E. Eskridge, 1996: Improved Magnus' form approximation saturation vapor pressure. J. Appl. Meteor., 35, 601–609 Buck, . L., 1981: New Equations Computing Vapor Pressure Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527–1532, https://doi.org/10.1175/1520-0450(1981)020<1527:NEFCVP>2.0.CO;2. Buck (1996), Buck (1996), Buck Research CR-1A User's Manual, Appendix 1. https://bmcnoldy.earth.miami.edu/Humidity.html","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcDP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dew Point — calcDP","text":"","code":"# Dew point at 20°C and 50% relative humidity (RH) # Default Magnus method calcDP(20, 50) #> [1] 9.261107  # Using Buck method calcDP(20, 50, method = \"Buck\") #> [1] 9.250632  # Validation check calcDP(20, calcRH_DP(20, calcDP(20, 50))) #> [1] 9.261107 calcDP(20, calcRH_DP(20, calcDP(20, 50, method = \"Buck\"), method = \"Buck\"), method = \"Buck\") #> [1] 9.250632   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>   dplyr::mutate(     DewPoint = calcDP(Temp, RH),     DewPoint_Buck = calcDP(Temp, RH, method = \"Buck\")) #> # A tibble: 5 × 7 #>   Site   Sensor Date                 Temp    RH DewPoint DewPoint_Buck #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl>         <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     6.38          6.39 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     6.34          6.35 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     6.30          6.31 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     6.22          6.22 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     6.18          6.18"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"function calculates Equilibrium Moisture Content (EMC) wood based relative humidity temperature.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"","code":"calcEMC_wood(Temp, RH)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"EMC, Equilibrium Moisture Content (0-100%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"Equilibrium Moisture Content (EMC) moisture content material, wood hygroscopic substanceshas reached equilibrium environment longer gaining losing moisture specific temperature relative humidity. safe EMC range wood typically 6 range helps prevent issues warping, cracking, mold growth, can occur moisture content falls exceeds levels.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"Simpson, W. T. (1998). Equilibrium moisture content wood outdoor locations United States worldwide. Res. Note FPL-RN-0268. Madison, WI: U.S. Department Agriculture, Forest Service, Forest Products Laboratory. Hailwood, . J., Horrobin, S. (1946). Absorption water polymers: Analysis terms simple model. Transactions Faraday Society 42, B084-B092. DOI:10.1039/TF946420B084","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEMC_wood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Equilibrium Moisture Content for wood (EMC) — calcEMC_wood","text":"","code":"# Equilibrium moisture content for wood at 20°C and 50% relative humidity (RH) calcEMC_wood(20, 50) #> [1] 9.271141   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(EMC = calcEMC_wood(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH   EMC #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  7.20 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  7.19 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  7.17 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  7.17 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  7.16"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEnthalpy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Enthalpy — calcEnthalpy","title":"Calculate Enthalpy — calcEnthalpy","text":"Function calculate enthalpy temperature (°C) relative humidity (%). Enthalpy total heat content air, combining sensible (related temperature) latent heat (related moisture content), used HVAC calculations. Enthalpy amount energy required bring gas current state dry gas 0°C.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEnthalpy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Enthalpy — calcEnthalpy","text":"","code":"calcEnthalpy(Temp, RH, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEnthalpy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Enthalpy — calcEnthalpy","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) ... Additional arguments supply calcPws calcMR","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEnthalpy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Enthalpy — calcEnthalpy","text":"h Enthalpy (kJ/kg)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcEnthalpy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Enthalpy — calcEnthalpy","text":"","code":"# Enthalpy at at 20°C (Temp) and 50% relative humidity (RH) calcEnthalpy(20, 50) #> [1] 38.62649   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(Enthalpy = calcEnthalpy(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH Enthalpy #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     37.2 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     37.1 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     37.1 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     36.9 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     36.8"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Frost Point — calcFP","title":"Calculate Frost Point — calcFP","text":"Function calculate frost point (°C) temperature (°C) relative humidity (%).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Frost Point — calcFP","text":"","code":"calcFP(Temp, RH)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Frost Point — calcFP","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Frost Point — calcFP","text":"Tf, Frost Point (°Celsius)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Frost Point — calcFP","text":"Formula coefficients Arden Buck equation (1981, 1996) saturation vapor pressure ice. = 6.1115 b = 23.036 c = 279.82 d = 333.7","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Frost Point — calcFP","text":"function unstable development.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Frost Point — calcFP","text":"","code":"# calcFP is unstable and is under development # Frost point at 20°C (Temp) and 50% relative humidity (RH) calcFP(20, 50) #> [1] 10.58328 calcFP(0, 50) #> [1] -8.173764   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(FrostPoint = calcFP(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH FrostPoint #>   <chr>  <chr>  <dttm>              <dbl> <dbl>      <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8       8.26 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7       8.23 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6       8.19 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6       8.10 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5       8.06"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFtoC.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert temperature (F) to temperature (C) — calcFtoC","title":"Convert temperature (F) to temperature (C) — calcFtoC","text":"Convert temperature Fahrenheit temperature Celsius","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFtoC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert temperature (F) to temperature (C) — calcFtoC","text":"","code":"calcFtoC(TempF)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFtoC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert temperature (F) to temperature (C) — calcFtoC","text":"TempF Temperature (Fahrenheit )","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFtoC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert temperature (F) to temperature (C) — calcFtoC","text":"TempC Temperature (Celsius)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcFtoC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert temperature (F) to temperature (C) — calcFtoC","text":"","code":"# Fahrenheit to Celsius calcFtoC(32) #> [1] 0 calcFtoC(68) #> [1] 20  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(TempC = calcFtoC((Temp * 9/5) + 32)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH TempC #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  21.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  21.8 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  21.8 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  21.7 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  21.7"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Humidity Ratio — calcHR","title":"Calculate Humidity Ratio — calcHR","text":"Function calculate humidity ratio (g/kg) temperature (°C) relative humidity (%). Humidity ratio mass water vapor present given volume air relative mass dry air. Also known \"moisture content\". Function uses calcMR","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Humidity Ratio — calcHR","text":"","code":"calcHR(Temp, RH, P_atm = 1013.25, B = 621.9907, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Humidity Ratio — calcHR","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) P_atm Atmospheric pressure = 1013.25 (hPa) B B = 621.9907 g/kg air ... Additional arguments supply calcPws calcMR","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Humidity Ratio — calcHR","text":"HR Humidity ratio (g/kg)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Humidity Ratio — calcHR","text":"function requires calcMR function available environment.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcHR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Humidity Ratio — calcHR","text":"","code":"# Humidity ratio at 20°C (Temp) and 50% relative humidity (RH) calcHR(20, 50) #> [1] 7.260814   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(HumidityRatio = calcHR(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH HumidityRatio #>   <chr>  <chr>  <dttm>              <dbl> <dbl>         <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8          5.96 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7          5.94 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6          5.92 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6          5.89 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5          5.87"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Life-time Multiplier for chemical degradation — calcLM","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"Function calculate lifetime multiplier temperature relative humidity. `calcLM` function calculates lifetime multiplier chemical degradation objects based temperature relative humidity conditions. metric provides estimate object’s expected lifetime relative standard conditions (20°C 50% RH); values >1 indicate conditions prolong lifetime; values <1 indicate higher risk chemical degradation.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"","code":"calcLM(Temp, RH, EA = 100)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"Temp Temperature (Celsius) RH Relative Humidity (0-100%) EA Activation Energy (J/mol). 100 J/mol cellulosic (paper) 70 J/mol yellowing varnish","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"Lifetime multiplier","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"Based experiments rate decay paper, films dyes. Activation energy, Ea = 100 J/mol (degradation cellulose - paper), 70 J/mol (yellowing varnish - furniture, painting, sculpture). Gas constant, R = 8.314 J/K.mol $$LM=\\left(\\frac{50\\%RH}{RH}\\right)^{1.3}.e\\left(\\frac{E_a}{R}.\\left(\\frac{1}{T_K}-\\frac{1}{293}\\right)\\right)$$ lifetime multiplier gives indication speed natural decay object. expresses expected lifetime object compared expected lifetime object 20°C 50% RH. means result = 1, expected lifetime object 'good'. closer go 0, less suited environment . result expressed numerically time, also gives idea period year object suffers . data based experiments paper, synthetic films dyes.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"Michalski, S., ‘Double life five-degree drop, double life halving relative humidity’, Preprints 13th IcOM-cc Triennial Meeting rio de Janeiro (22–27 September 2002), ed. r. Vontobel, James & James, London (2002) Vol. 66–72. Martens Marco, 2012: Climate Risk Assessment Museums (Thesis, Tue).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Life-time Multiplier for chemical degradation — calcLM","text":"","code":"# Lifetime multiplier at 20°C (Temp) and 50% relative humidity (RH) calcLM(20, 50) #> [1] 1  calcLM(20, 50, EA = 70) #> [1] 1   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(LifeTime = calcLM(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH LifeTime #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     1.11 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     1.11 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     1.11 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     1.11 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     1.11  mydata |>   dplyr::mutate(LM = calcLM(Temp, RH)) |>    dplyr::summarise(LM_avg = mean(LM, na.rm = TRUE)) #> # A tibble: 1 × 1 #>   LM_avg #>    <dbl> #> 1   1.11"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mixing Ratio — calcMR","title":"Calculate Mixing Ratio — calcMR","text":"Function calculate mixing ratio (g/kg) temperature (°C) relative humidity (%). Mixing Ratio mass water vapor present given volume air relative mass dry air.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mixing Ratio — calcMR","text":"","code":"calcMR(Temp, RH, P_atm = 1013.25, B = 621.9907, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mixing Ratio — calcMR","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) P_atm Atmospheric pressure = 1013.25 (hPa) B B = 621.9907 g/kg air ... Additional arguments supply calcPws","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mixing Ratio — calcMR","text":"X Mixing ratio, mass water vapour / mass dry gas (g/kg)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Mixing Ratio — calcMR","text":"X Mixing ratio (mass water vapour / mass dry gas) Pw = Pws(40°C) = 73.75 hPa X = 621.9907 x 73.75 / (998 - 73.75) = 49.63 g/kg","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mixing Ratio — calcMR","text":"","code":"# Mixing ratio at 20°C (Temp) and 50% relative humidity (RH) calcMR(20, 50) #> [1] 7.260814  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(MixingRatio = calcMR(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH MixingRatio #>   <chr>  <chr>  <dttm>              <dbl> <dbl>       <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8        5.96 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7        5.94 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6        5.92 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6        5.89 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5        5.87"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"function calculates mould growth index wooden materials based temperature, relative humidity, factors. implements mathematical model developed Hukka Viitanen, predicts mould growth varying environmental conditions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"","code":"calcMould_VTT(   Temp,   RH,   M_prev = 0,   sensitivity = \"very\",   wood = 0,   surface = 0 )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) M_prev previous mould index value (default 0). sensitivity sensitivity level material mould growth. Options '', 'sensitive', 'medium', 'resistant'. Default ''. wood wood species; 0 pine 1 spruce. Default 0. surface surface quality; 0 resawn kiln dried timber 1 timber dried normal kiln drying process. Default 0 (worst case).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"M Mould growth index 0 = mould growth 1 = Small amounts mould growth surface visible microscope 2 = Several local mould growth colonies surface visible microscope 3 = Visual findings mould surface <10% coverage 50% coverage microsocpe 4 = Visual findings mould surface 10-50% coverage >50% coverage microscope 5 = Plenty growth surface >50% visual coverage 6 = Heavy tight growth, coverage almost 100%","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"Senstivity related material surface, mould grow . Options function avaiable : '' sensitive materials include pine sapwood. 'sensitive' materials include glued wooden boards, PUR paper surface, spruce 'medium' resistant materials include concrete, glass wool, polyester wool 'resistant' materials include PUR polished surface","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"Hukka, ., Viitanen, H. mathematical model mould growth wooden material. Wood Science Technology 33, 475–485 (1999). https://doi.org/10.1007/s002260050131 Viitanen, Hannu, Tuomo Ojanen. \"Improved model predict mold growth building materials.\" Thermal Performance Exterior Envelopes Whole Buildings X–Proceedings CD (2007): 2-7.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_VTT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mould Growth Index (VTT model) — calcMould_VTT","text":"","code":"# Mould growth index at 25°C (Temp) and 85% relative humidity (RH) calcMould_VTT(Temp = 25, RH = 85) #> [1] 0.01838254  calcMould_VTT(Temp = 18, RH = 70, M_prev = 2, sensitivity = \"medium\", wood = 1, surface = 1) #> [1] 2.001801  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>    dplyr::mutate(       MouldIndex = calcMould_VTT(Temp, RH),       MouldIndex_sensitve = calcMould_VTT(Temp, RH, sensitivity = \"sensitive\")    ) #> # A tibble: 5 × 7 #>   Site   Sensor Date                 Temp    RH MouldIndex MouldIndex_sensitve #>   <chr>  <chr>  <dttm>              <dbl> <dbl>      <dbl>               <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8          0                   0 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7          0                   0 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6          0                   0 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6          0                   0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5          0                   0"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"function calculates Lowest Isoline Mould (LIM) based temperature relative humidity, using model developed Zeng et al. (2023). LIM lowest envelope temperature humidity isoline certain mould growth rate (u). LIM0 critical value mould growth, humidity kept critcal value, given temperature, risk mould growth.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"","code":"calcMould_Zeng(Temp, RH, LIM = 0, label = FALSE)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) LIM specific LIM value calculate. Must one 0, 0.1, 0.5, 1, 2, 3, 4. Default 0. label Logical. TRUE, returns descriptive label instead numeric value. Default FALSE.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"label FALSE, returns calculated LIM value Relative Humidity (0-100%).         label TRUE, returns character string describing mould growth rate category.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"function calculates LIM values mould genera including Cladosporium, Penicillium, Aspergillus. LIM values represent different mould growth rates: LIM0: Low limit mould growth LIM0.1: 0.1 mm/day growth rate LIM0.5: 0.5 mm/day growth rate LIM1: 1 mm/day growth rate LIM2: 2 mm/day growth rate LIM3: 3 mm/day growth rate LIM4: 4 mm/day growth rate LIM4: Greater 4 mm/day growth rate (9 mm/day theorectical maximum)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"Zeng L, Chen Y, Ma M, et al. Prediction mould growth rate within building envelopes: development validation improved model. Building Services Engineering Research Technology. 2023;44(1):63-79. doi:10.1177/01436244221137846 Sautour M, Dantigny P, Divies C, Bensoussan M. temperature-type model describing relationship fungal growth water activity. Int J Food Microbiol. 2001 Jul 20;67(1-2):63-9. doi: 10.1016/s0168-1605(01)00471-8. PMID: 11482570.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcMould_Zeng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mould Growth Rate Limits (Zeng et al.) — calcMould_Zeng","text":"","code":"# Lowest Isoline for Mould at 20°C (Temp) and 75% relative humidity (RH) calcMould_Zeng(20, 75) #> [1] 75.61875 calcMould_Zeng(20, 75, LIM = 0) #> [1] 75.61875 calcMould_Zeng(20, 75, label = TRUE) #> [1] 0  calcMould_Zeng(20, 85) #> [1] 75.61875 calcMould_Zeng(20, 85, LIM = 2) #> [1] 86.58875 calcMould_Zeng(20, 85, label = TRUE) #> [1] 2   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>    dplyr::mutate(       RH_LIM0 = calcMould_Zeng(Temp, RH),       RH_LIM1 = calcMould_Zeng(Temp, RH, LIM = 1),       LIM = calcMould_Zeng(Temp, RH, label = TRUE)    ) #> # A tibble: 5 × 8 #>   Site   Sensor Date                 Temp    RH RH_LIM0 RH_LIM1   LIM #>   <chr>  <chr>  <dttm>              <dbl> <dbl>   <dbl>   <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8    75.1    83.1     0 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7    75.1    83.1     0 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6    75.1    83.1     0 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6    75.1    83.1     0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5    75.1    83.1     0"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Preservation Index — calcPI","title":"Calculate Preservation Index — calcPI","text":"Calculates Preservation Index (PI) estimate natural decay speed objects. Preservation Index, developed Image Permanence Institute, chemical kinetics metric determines rate deterioration materials based temperature relative humidity. `calcPI` function returns estimated years deterioration, higher values indicating conditions hygro-thermodynamically favorable object.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Preservation Index — calcPI","text":"","code":"calcPI(Temp, RH, EA = 90300)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Preservation Index — calcPI","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) EA Activation Energy (J/mol). Default 90300 J/mol cellulose acetate film","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Preservation Index — calcPI","text":"PI Preservation Index, expected lifetime (1/rate,k)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Preservation Index — calcPI","text":"formula based Arrhenius equation (molecular energy) equivalent E (best fit cellulose triacetate deterioration data). parameters integrated mimic results experiments. result average chemical lifetime one point time chemically unstable object (based experiments acetate film). means expected lifetime specific T, RH theoretical object remains stable (fluctuations). chosen activation energy (Ea) larger impact low temperature. Developed Image Permance Institute, model based chemical degradation cellulose acetate (Reilly et al., 1995): -  Rate, k = [RH%] × 5.9 × 10^12 × exp(-90300 / (8.314 × TempK)) -  Preservation Index, PI = 1/k metric early version lifetime multiplier based chemical deterioration acetate film. last object naturally relatively unstable lies biggest difference chemical metrics together fact relative lifetime object. lifetime multipliers give similar results 20% 60% RH. results low high RH can unreliable.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Preservation Index — calcPI","text":"Reilly, James M. New Tools Preservation: Assessing Long-Term Environmental Effects Library Archives Collections. Commission Preservation Access, 1400 16th Street, NW, Suite 740, Washington, DC 20036-2217, 1995. Padfield, T. 2004. Preservation Index Time Weighted Preservation Index. https://www.conservationphysics.org/twpi/twpi_01.html Activation Energy: ASHRAE, 2011. Image Permanence Institute, eClimateNotebook","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Preservation Index — calcPI","text":"","code":"# Preservation Index at 20°C (Temp) and 50% relative humidity (RH) calcPI(20, 50) #> [1] 41.76134   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(PI = calcPI(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH    PI #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  45.3 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  45.4 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  45.5 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  46.1 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  46.2"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Water Vapour Pressure — calcPw","title":"Calculate Water Vapour Pressure — calcPw","text":"Function calculate water vapour pressure (hPa) temperature (°C) relative humidity (%). Water vapour pressure pressure exerted water vapour gas.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Water Vapour Pressure — calcPw","text":"","code":"calcPw(Temp, RH, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Water Vapour Pressure — calcPw","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) ... Additional arguments supply calcPws","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Water Vapour Pressure — calcPw","text":"Pw, Water Vapour Pressure (hPa)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Water Vapour Pressure — calcPw","text":"Different formulations calculating water vapour pressure available: Arden Buck equation (\"Buck\") International Association Properties Water Steam (\"IAPWS\") August-Roche-Magnus approximation (\"Magnus\") VAISALA humidity conversion formula (\"VAISALA\") water vapor pressure (P_w) calculated using following equation: $$P_w=\\frac{P_{ws}\\left(Temp\\right)\\times RH}{100}$$ : P_ws saturation vapor pressure using calcPws. RH relative humidity percent. Temp temperature degrees Celsius.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Water Vapour Pressure — calcPw","text":"See Wikipedia discussion accuarcy approach: https://en.wikipedia.org/wiki/Vapour_pressure_of_water","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Water Vapour Pressure — calcPw","text":"Wagner, W., & Pru\\ß, . (2002). IAPWS formulation 1995 thermodynamic properties ordinary water substance general scientific use. Journal Physical Chemical Reference Data, 31(2), 387-535. Alduchov, O. ., R. E. Eskridge, 1996: Improved Magnus' form approximation saturation vapor pressure. J. Appl. Meteor., 35, 601-609. Buck, . L., 1981: New Equations Computing Vapor Pressure Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527–1532, https://doi.org/10.1175/1520-0450(1981)020<1527:NEFCVP>2.0.CO;2. Buck (1996), Buck (1996), Buck Research CR-1A User's Manual, Appendix 1. VAISALA. Humidity Conversions: Formulas methods calculating humidity parameters. Ref. B210973EN-O","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Water Vapour Pressure — calcPw","text":"","code":"# Water vapour pressure at 20°C (Temp) and 50% relative humidity (RH) calcPw(20, 50) #> [1] 11.6917  # Calculate relative humidity at 50%RH calcPw(20, 50) / calcPws(20) * 100 #> [1] 50   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(Pw = calcPw(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH    Pw #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  9.61 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  9.59 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  9.56 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  9.50 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  9.48  mydata |> dplyr::mutate(Buck = calcPw(Temp, RH, method = \"Buck\"),                               IAPWS = calcPw(Temp, RH, method = \"IAPWS\"),                               Magnus = calcPw(Temp, RH, method = \"Magnus\"),                               VAISALA = calcPw(Temp, RH, method = \"VAISALA\")) #> # A tibble: 5 × 9 #>   Site   Sensor Date                 Temp    RH  Buck IAPWS Magnus VAISALA #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  9.61  9.62   9.59    9.62 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  9.59  9.59   9.57    9.59 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  9.56  9.56   9.54    9.56 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  9.50  9.51   9.48    9.51 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  9.48  9.48   9.46    9.48"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Water Vapour Saturation Pressure — calcPws","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"Function calculate water vapour saturation pressure (hPa) temperature (°C) using International Association Properties Water Steam (IAPWS default), Arden Buck equation (Buck), August-Roche-Magnus approximation (Magnus) VAISALA conversion formula. Water vapour saturation pressure maximum partial pressure water vapour can present gas given temperature.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"","code":"calcPws(   Temp,   P_atm = 1013.25,   method = c(\"Buck\", \"IAPWS\", \"Magnus\", \"VAISALA\") )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"Temp Temperature (°Celsius) P_atm Atmospheric pressure = 1013.25 (hPa) method Character. Method use calculation. Options \"Buck\" (default), \"IAPWS\", \"Magnus\" \"VAISALA\".","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"Pws, Saturation vapor pressure (hPa)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"Different formulations calculating water vapour pressure available: Arden Buck equation (\"Buck\") International Association Properties Water Steam (\"IAPWS\") August-Roche-Magnus approximation (\"Magnus\") VAISALA humidity conversion formula (\"VAISALA\")","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"See Wikipedia discussion accuarcy approach: https://en.wikipedia.org/wiki/Vapour_pressure_of_water lower accuracy limited temperature range can tolerated simpler formula can used water vapour saturation pressure water (ice): Pws = 6.116441 x 10^( (7.591386 x Temp) / (Temp + 240.7263) )","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"Wagner, W., & Pru\\ß, . (2002). IAPWS formulation 1995 thermodynamic properties ordinary water substance general scientific use. Journal Physical Chemical Reference Data, 31(2), 387-535. Alduchov, O. ., R. E. Eskridge, 1996: Improved Magnus' form approximation saturation vapor pressure. J. Appl. Meteor., 35, 601-609. Buck, . L., 1981: New Equations Computing Vapor Pressure Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527–1532, https://doi.org/10.1175/1520-0450(1981)020<1527:NEFCVP>2.0.CO;2. Buck (1996), Buck (1996), Buck Research CR-1A User's Manual, Appendix 1. VAISALA. Humidity Conversions: Formulas methods calculating humidity parameters. Ref. B210973EN-O","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcPws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Water Vapour Saturation Pressure — calcPws","text":"","code":"# Saturation vapour pressure at 20°C calcPws(20) #> [1] 23.3834 calcPws(20, method = \"Buck\") #> [1] 23.3834 calcPws(20, method = \"IAPWS\") #> [1] 23.39194 calcPws(20, method = \"Magnus\") #> [1] 23.33441 calcPws(20, method = \"VAISALA\") #> [1] 23.39249  # Check of calculations of relative humidity at 50%RH calcPw(20, 50, method = \"Buck\") / calcPws(20, method = \"Buck\") * 100 #> [1] 50 calcPw(20, 50, method = \"IAPWS\") / calcPws(20, method = \"IAPWS\") * 100 #> [1] 50 calcPw(20, 50, method = \"Magnus\") / calcPws(20, method = \"Magnus\") * 100 #> [1] 50 calcPw(20, 50, method = \"VAISALA\") / calcPws(20, method = \"VAISALA\") * 100 #> [1] 50   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(Pws = calcPws(Temp)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH   Pws #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  26.1 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  26.1 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  26.1 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  26.0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  26.0  mydata |> dplyr::mutate(Buck = calcPws(Temp, method = \"Buck\"),                               IAPWS = calcPws(Temp, method = \"IAPWS\"),                               Magnus = calcPws(Temp, method = \"Magnus\"),                               VAISALA = calcPws(Temp, method = \"VAISALA\")) #> # A tibble: 5 × 9 #>   Site   Sensor Date                 Temp    RH  Buck IAPWS Magnus VAISALA #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  26.1  26.1   26.1    26.1 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  26.1  26.1   26.1    26.1 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  26.1  26.1   26.1    26.1 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  26.0  26.0   25.9    26.0 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  26.0  26.0   25.9    26.0"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"Function calculate relative humidity (%) temperature (°C) absolute humidity (g/m^3)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"","code":"calcRH_AH(Temp, AH, P_atm = 1013.25)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"Temp Temperature (°Celsius) AH Absolute Humidity (g/m³) P_atm Atmospheric pressure = 1013.25 (hPa)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"Relative Humidity (0-100%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"Buck, . L. (1981). New equations computing vapor pressure enhancement factor. Journal Applied Meteorology, 20(12), 1527-1532.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_AH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Relative Humidity from temperature and absolute humidity — calcRH_AH","text":"","code":"# Relative humidity (RH) at temperature of 20°C (Temp) and absolute humidity of 8.645471 g/m³ (AH) calcRH_AH(20, 8.630534) #> [1] 50  calcRH_AH(20, calcAH(20, 50)) #> [1] 50   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(Abs = calcAH(Temp, RH), RH2 = calcRH_AH(Temp, Abs)) #> # A tibble: 5 × 7 #>   Site   Sensor Date                 Temp    RH   Abs   RH2 #>   <chr>  <chr>  <dttm>              <dbl> <dbl> <dbl> <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8  7.05  36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7  7.03  36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6  7.01  36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6  6.97  36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5  6.95  36.5"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"Function calculate relative humidity (%) temperature (°C) dew point (°C)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"","code":"calcRH_DP(Temp, DewP, method = c(\"Magnus\", \"Buck\"))"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"Temp Temperature (°Celsius) DewP Td (DP), Dew Point (°Celsius) method Calculation method: either \"Magnus\" \"Buck\". Defaults \"Magnus\".","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"Relative Humidity (0-100%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"function supports two methods relative humidity calculation: \"Magnus\" (default): Uses August-Roche-Magnus approximation,   valid 0°C < Temp < 60°C 1% < RH < 100%. \"Buck\": Uses Arden Buck equation Bögel modification,   valid -30°C < Temp < 60°C 1% < RH < 100%. methods calculate temperature based vapor pressure saturation vapour pressure relationships. Magnus method chosen default stable used calcDP calcTemp functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"Alduchov, O. ., R. E. Eskridge, 1996: Improved Magnus' form approximation saturation vapor pressure. J. Appl. Meteor., 35, 601–609 Buck, . L., 1981: New Equations Computing Vapor Pressure Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527–1532, https://doi.org/10.1175/1520-0450(1981)020<1527:NEFCVP>2.0.CO;2. Buck (1996), Buck (1996), Buck Research CR-1A User's Manual, Appendix 1. https://bmcnoldy.earth.miami.edu/Humidity.html","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcRH_DP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Relative Humidity from temperature and dew point — calcRH_DP","text":"","code":"# Relative humidity (RH) at tempertaure of 20°C (Temp) and dew point of 15°C (DewP) calcRH_DP(20, 15) #> [1] 72.93877 calcRH_DP(20, 15, method = \"Buck\") #> [1] 73.17992  calcRH_DP(20, calcDP(20, 50)) #> [1] 50  calcRH_DP(20, calcDP(20, 50, method = \"Buck\"), method = \"Buck\") #> [1] 50  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>   dplyr::mutate(     DewPoint = calcDP(Temp, RH),     RH_default = calcRH_DP(Temp, DewPoint),     RH_Buck = calcRH_DP(Temp, DewPoint, method = \"Buck\")) #> # A tibble: 5 × 8 #>   Site   Sensor Date                 Temp    RH DewPoint RH_default RH_Buck #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl>      <dbl>   <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     6.38       36.8    36.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     6.34       36.7    36.7 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     6.30       36.6    36.6 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     6.22       36.6    36.6 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     6.18       36.5    36.5"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Specific Humidity — calcSH","title":"Calculate Specific Humidity — calcSH","text":"Function calculate specific humidity (g/kg) temperature (°C) relative humidity (%). Specific humidity ratio mass water vapor mass air. Function uses calcMR","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Specific Humidity — calcSH","text":"","code":"calcSH(Temp, RH, P_atm = 1013.25, B = 621.9907, ...)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Specific Humidity — calcSH","text":"Temp Temperature (°Celsius) RH Relative Humidity (0-100%) P_atm Atmospheric pressure = 1013.25 (hPa) B B = 621.9907 g/kg air ... Additional arguments supply calcPws calcMR","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Specific Humidity — calcSH","text":"SH Specific Humidity (g/kg)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Specific Humidity — calcSH","text":"function requires calcMR function available environment.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Specific Humidity — calcSH","text":"Wallace, J.M. Hobbs, P.V. (2006). Atmospheric Science: Introductory Survey. Academic Press, 2nd edition.","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Specific Humidity — calcSH","text":"","code":"# Calculate specific humidity at 20°C (Temp) and 50% relative humidity (RH) calcSH(20, 50) #> [1] 0.8789466   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |> dplyr::mutate(SpecificHumidity = calcSH(Temp, RH)) #> # A tibble: 5 × 6 #>   Site   Sensor Date                 Temp    RH SpecificHumidity #>   <chr>  <chr>  <dttm>              <dbl> <dbl>            <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8            0.856 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7            0.856 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6            0.856 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6            0.855 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5            0.854"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeatRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","title":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","text":"function calculates Sensible Heat Ratio (SHR) using sensible total heating values. Sensible heat ratio ratio sensible heat total heat.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeatRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","text":"","code":"calcSensibleHeatRatio(Temp1, Temp2, RH1, RH2, volumeFlowRate)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeatRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","text":"Temp1 Initial Temperature (°Celsius) Temp2 Final Temperature (°Celsius) RH1 Initial Relative Humidity (0-100%) RH2 Final Relative Humidity (0-100%) volumeFlowRate Volume flow rate air cubic meters per second (m³/s)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeatRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","text":"SHR Sensible Heat Ratio (0-100%)","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeatRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Sensible Heat Ratio (SHR) — calcSensibleHeatRatio","text":"","code":"calcSensibleHeatRatio(20, 25, 50, 30, 0.5) #> [1] 27.91313"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeating.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Sensible Heating — calcSensibleHeating","title":"Calculate Sensible Heating — calcSensibleHeating","text":"function calculates sensible heating power. Sensible heat energy causes object's temperature change without altering phase, also known \"dry\" heat can feel.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Sensible Heating — calcSensibleHeating","text":"","code":"calcSensibleHeating(Temp1, Temp2, RH = 50, volumeFlowRate)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Sensible Heating — calcSensibleHeating","text":"Temp1 Initial Temperature (°Celsius) Temp2 Final Temperature (°Celsius) RH Initial Relative Humidity (0-100%). Optional, default 50%. volumeFlowRate Volume flow rate air cubic meters per second (m³/s)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Sensible Heating — calcSensibleHeating","text":"Sensible heat kilowatts (kW)","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcSensibleHeating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Sensible Heating — calcSensibleHeating","text":"","code":"calcSensibleHeating(20, 25, 50, 0.5) #> [1] 3.015065  calcSensibleHeating(20, 25, 60, 0.5) #> [1] 3.012424"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Temperature from relative humidity and dew point — calcTemp","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"function calculates temperature (°C) relative humidity (%) dew point temperature (°C).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"","code":"calcTemp(RH, DewP, method = c(\"Magnus\", \"Buck\"))"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"RH Relative Humidity (0-100%) DewP Td (DP), Dew Point (°Celsius) method Calculation method: either \"Magnus\" \"Buck\". Defaults \"Magnus\".","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"Temp, Temperature (°Celsius)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"function supports two methods temperature calculation: \"Magnus\" (default): Uses August-Roche-Magnus approximation,   valid 0°C < Temp < 60°C 1% < RH < 100%. \"Buck\": Uses Arden Buck equation Bögel modification,   valid -30°C < Temp < 60°C 1% < RH < 100%. methods calculate temperature based vapor pressure saturation vapour pressure relationships. Magnus method chosen default stable used calcDP calcRH_DP functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"Alduchov, O. ., R. E. Eskridge, 1996: Improved Magnus' form approximation saturation vapor pressure. J. Appl. Meteor., 35, 601–609 Buck, . L., 1981: New Equations Computing Vapor Pressure Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527–1532, https://doi.org/10.1175/1520-0450(1981)020<1527:NEFCVP>2.0.CO;2. Buck (1996), Buck (1996), Buck Research CR-1A User's Manual, Appendix 1. https://bmcnoldy.earth.miami.edu/Humidity.html","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTemp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Temperature from relative humidity and dew point — calcTemp","text":"","code":"# Calculate temperature (Temp) at 50% relative humidity (RH) and dew point 15°C (DewP) # Using Magnus method calcTemp(50, 15) #> [1] 26.24387  # Using Buck method calcTemp(50, 15, method = \"Buck\") #> [1] 26.29922  calcTemp(50, calcDP(20, 50)) #> [1] 20   # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 5)  mydata |>   dplyr::mutate(     DewPoint = calcDP(Temp, RH),     Temp_default = calcTemp(RH, DewPoint),     Temp_Buck = calcTemp(RH, DewPoint)) #> # A tibble: 5 × 8 #>   Site   Sensor Date                 Temp    RH DewPoint Temp_default Temp_Buck #>   <chr>  <chr>  <dttm>              <dbl> <dbl>    <dbl>        <dbl>     <dbl> #> 1 London Room 1 2024-01-01 00:00:00  21.8  36.8     6.38         21.8      21.8 #> 2 London Room 1 2024-01-01 00:15:00  21.8  36.7     6.34         21.8      21.8 #> 3 London Room 1 2024-01-01 00:29:59  21.8  36.6     6.30         21.8      21.8 #> 4 London Room 1 2024-01-01 00:44:59  21.7  36.6     6.22         21.7      21.7 #> 5 London Room 1 2024-01-01 00:59:59  21.7  36.5     6.18         21.7      21.7"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTotalHeating.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Total Heating — calcTotalHeating","title":"Calculate Total Heating — calcTotalHeating","text":"function calculates total heating power. Total heating power sum sensible (felt) heat latent (hidden) heat.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTotalHeating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Total Heating — calcTotalHeating","text":"","code":"calcTotalHeating(Temp1, Temp2, RH1, RH2, volumeFlowRate)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTotalHeating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Total Heating — calcTotalHeating","text":"Temp1 Initial Temperature (°Celsius) Temp2 Final Temperature (°Celsius) RH1 Initial Relative Humidity (0-100%) RH2 Final Relative Humidity (0-100%) volumeFlowRate Volume flow rate air cubic meters per second (m³/s)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTotalHeating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Total Heating — calcTotalHeating","text":"Total Heating kilowatts (kW)","code":""},{"path":[]},{"path":"https://bhavshah01.github.io/ConSciR/reference/calcTotalHeating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Total Heating — calcTotalHeating","text":"","code":"calcTotalHeating(20, 25, 50, 30, 0.5) #> [1] 0.9756482"},{"path":"https://bhavshah01.github.io/ConSciR/reference/data_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the file path to data files — data_file_path","title":"Return the file path to data files — data_file_path","text":"Access mydata.xlsx files inst/extdata folder","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/data_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the file path to data files — data_file_path","text":"","code":"data_file_path(path = NULL)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/data_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the file path to data files — data_file_path","text":"path Name file quotes extension, e.g. \"mydata.xlsx\"","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/data_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the file path to data files — data_file_path","text":"String path specified file","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/data_file_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the file path to data files — data_file_path","text":"","code":"data_file_path() #> [1] \"ConSciR_hexsticker.png\" \"mydata.xlsx\"             data_file_path(\"mydata.xlsx\") #> [1] \"/home/runner/work/_temp/Library/ConSciR/extdata/mydata.xlsx\""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRH.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph temperature and humidity data — graph_TRH","title":"Graph temperature and humidity data — graph_TRH","text":"Use tool produce simple temperature humidity plot optional background bands showing target temperature relative humidity ranges. Optionally, add function graph, e.g. `calcDP`, `calcAH`, etc.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph temperature and humidity data — graph_TRH","text":"","code":"graph_TRH(   mydata,   Date = \"Date\",   Temp = \"Temp\",   RH = \"RH\",   facet_by = \"Sensor\",   LowT = 16,   HighT = 25,   LowRH = 40,   HighRH = 60,   y_func = \"none\",   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph temperature and humidity data — graph_TRH","text":"mydata data frame containing date (Date), temperature (Temp), relative humidity (RH) columns. Date name column mydata containing date information (\"Date\"). Temp name column mydata containing temperature data (\"Temp\"). RH name column mydata containing relative humidity data (\"RH\"). facet_by Name categorical column facet ; defaults \"Sensor\". LowT Numeric lower bound temperature range (default 16). HighT Numeric upper bound temperature range (default 25). LowRH Numeric lower bound relative humidity range (default 40). HighRH Numeric upper bound relative humidity range (default 60). y_func Character string specifying function apply temperature humidity columns (e.g. \"calcAH\"). Default \"none\". ... Additional arguments passed y_func.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph temperature and humidity data — graph_TRH","text":"ggplot graph temperature relative humidity optional background bands.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph temperature and humidity data — graph_TRH","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 1000)  # Basic use with background ranges graph_TRH(mydata) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   # Add dew point and customise graph_TRH(mydata, y_func = \"calcDP\", LowT = 6, HighT = 28) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale."},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"Plots temperature vs relative humidity points coloured selected environmental metric calculated temperature humidity variables using ConSciR functions.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"","code":"graph_TRHbivariate(   mydata,   Temp = \"Temp\",   RH = \"RH\",   z_func = \"none\",   facet_by = \"Sensor\",   LowT = 16,   HighT = 25,   LowRH = 40,   HighRH = 60,   Temp_range = c(0, 40),   RH_range = c(0, 100),   alpha = 0.5,   limit_caption = \"\" )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"mydata data frame containing temperature (Temp) relative humidity (RH) columns. Temp name column mydata containing temperature data (\"Temp\"). RH name column mydata containing relative humidity data (\"RH\"). z_func character string specifying environmental metric function use. See details options (default `none`). facet_by Name categorical column facet ; defaults \"Sensor\". LowT Numeric value lower temperature limit target range. Default 16°C. HighT Numeric value upper temperature limit target range. Default 25°C. LowRH Numeric value lower relative humidity limit target range. Default 40%. HighRH Numeric value upper relative humidity limit target range. Default 60%. Temp_range Numeric vector length two defining x-axis plot limits temperature. RH_range Numeric vector length two defining y-axis plot limits relative humidity. alpha Numeric transparency level points. limit_caption Character string caption describing plot limits.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"ggplot2 plot object showing temperature vs relative humidity colored selected metric, annotated boundary segments.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"Humidity conservation functions can used y-axis. calcHR: Humidity Ratio (g/kg) calcMR: Mixing Ratio (g/kg) calcAH: Absolute Humidity (g/m^3) calcSH: Specific Humidity (g/kg) calcAD: Air Density (kg/m^3) calcDP: Dew Point (°C) calcFP: Frost Point (°C) calcEnthalpy: Enthalpy (kJ/kg) calcPws: Saturation vapor pressure (hPa) calcPw: Water Vapour Pressure (hPa) calcPI: Preservation Index calcLM: Lifetime calcEMC_wood: Equilibrium Moisture Content (wood)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_TRHbivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph a bivariate plot of temperature and humidity data — graph_TRHbivariate","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 100)  graph_TRHbivariate(   mydata,   z_func = \"calcAH\",   LowT = 16, HighT = 25,   LowRH = 40, HighRH = 60,   Temp_range = c(0, 40),   RH_range = c(0, 100),   alpha = 0.7,   limit_caption = \"Example limit box\" ) #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> ℹ The deprecated feature was likely used in the ConSciR package. #>   Please report the issue at <https://github.com/BhavShah01/ConSciR/issues>. #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> ℹ The deprecated feature was likely used in the ConSciR package. #>   Please report the issue at <https://github.com/BhavShah01/ConSciR/issues>."},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Psychrometric Chart — graph_psychrometric","title":"Create a Psychrometric Chart — graph_psychrometric","text":"function generates psychrometric chart based input temperature relative humidity data.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Psychrometric Chart — graph_psychrometric","text":"","code":"graph_psychrometric(   mydata,   Temp = \"Temp\",   RH = \"RH\",   data_col = NULL,   data_alpha = 0.5,   LowT = 16,   HighT = 25,   LowRH = 40,   HighRH = 60,   Temp_range = c(0, 40),   y_func = \"calcMR\",   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Psychrometric Chart — graph_psychrometric","text":"mydata data frame containing temperature relative humidity data. Temp Column name mydata temperature values. RH Column name mydata relative humidity values. data_col Name column use colouring points. Default \"Sensor\" present, otherwise \"RH\". data_alpha Value supply make points less transparent. Default 0.5. LowT Numeric value lower temperature limit target range. Default 16°C. HighT Numeric value upper temperature limit target range. Default 25°C. LowRH Numeric value lower relative humidity limit target range. Default 40%. HighRH Numeric value upper relative humidity limit target range. Default 60%. Temp_range Numeric vector length 2 specifying overall temperature range chart. Default c(0, 40). y_func Function calculate y-axis values. See options, default mixing ratio (`calcMR`). ... Additional arguments passed y_func.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Psychrometric Chart — graph_psychrometric","text":"ggplot object representing psychrometric chart.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Psychrometric Chart — graph_psychrometric","text":"Humidity conservation functions can used y-axis. calcHR: Humidity Ratio (g/kg) calcMR: Mixing Ratio (g/kg) calcAH: Absolute Humidity (g/m^3) calcSH: Specific Humidity (g/kg) calcAD: Air Density (kg/m^3) calcDP: Dew Point (°C) calcFP: Frost Point (°C) calcEnthalpy: Enthalpy (kJ/kg) calcPws: Saturation vapor pressure (hPa) calcPw: Water Vapour Pressure (hPa) calcPI: Preservation Index calcLM: Lifetime calcEMC_wood: Equilibrium Moisture Content (wood)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/graph_psychrometric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Psychrometric Chart — graph_psychrometric","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 100)  # Basic usage with default settings graph_psychrometric(mydata, Temp, RH)   # Custom temperature and humidity ranges graph_psychrometric(mydata, Temp, RH, LowT = 8, HighT = 28, LowRH = 30, HighRH = 70)   # Using a different psychrometric function (e.g., Absolute Humidity) graph_psychrometric(mydata, Temp, RH, y_func = calcAH)   # Adjusting the overall temperature range of the chart graph_psychrometric(mydata, Temp, RH, Temp_range = c(12, 30))"},{"path":"https://bhavshah01.github.io/ConSciR/reference/mydata.html","id":null,"dir":"Reference","previous_headings":"","what":"Climate dataset to demonstrate functions — mydata","title":"Climate dataset to demonstrate functions — mydata","text":"climate dataset use demonstrate functions work.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/mydata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climate dataset to demonstrate functions — mydata","text":"","code":"mydata"},{"path":"https://bhavshah01.github.io/ConSciR/reference/mydata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Climate dataset to demonstrate functions — mydata","text":"data frame 35,136 rows 5 columns: Site Site location name Sensor Sensor name, unique site Date Date ISOdate time format Temp, RH Temperature (C) relative humidity (%)","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/mydata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Climate dataset to demonstrate functions — mydata","text":"Climate","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/run_ConSciR_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the ConSciR Shiny Application — run_ConSciR_app","title":"Run the ConSciR Shiny Application — run_ConSciR_app","text":"Launch ConSciR Shiny app includes tools temperature relative humidity monitoring TRH charts, psychrometric charts, bivariate plots, mould growth predictions, silica gel calculator. Users can upload CSV Excel files formatted \"Date\", \"Temp\", \"RH\" columns. app provides data tidying functions downloadable cleaned CSV files. silica gel calculator estimates required amount silica gel based temperature, humidity data, case dimensions, air exchange rate (AER) known.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/run_ConSciR_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the ConSciR Shiny Application — run_ConSciR_app","text":"","code":"run_ConSciR_app()"},{"path":"https://bhavshah01.github.io/ConSciR/reference/run_ConSciR_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the ConSciR Shiny Application — run_ConSciR_app","text":"Shiny application object runs interactively.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/run_ConSciR_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the ConSciR Shiny Application — run_ConSciR_app","text":"","code":"if(interactive()) {     run_ConSciR_app() }"},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","title":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","text":"function creates Shiny module server uploading CSV Excel files, processing data, optional time averaging specified user, returning tidied dataset.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","text":"","code":"shiny_dataUploadServer(id)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","text":"id character string corresponds ID used UI function module.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","text":"returned reactive expression tidied data frame containing columns including Site Sensor identifiers, Date column rounded (floored) user-selected averaging interval, median chosen average temperature relative humidity group, numeric variables averaged present input data.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny Module Server for Data Upload and Processing — shiny_dataUploadServer","text":"","code":"if(interactive()) {   ui <- fluidPage(     shiny_dataUploadUI(\"dataUpload\")   )   server <- function(input, output, session) {     data <- shiny_dataUploadServer(\"dataUpload\")   } }"},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","title":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","text":"Creates Shiny UI module uploading CSV Excel files, specifying flexible time averaging interval statistic via text inputs. UI includes file upload control, text box entering time averaging interval (e.g., \"hour\", \"day\", \"month\"), text box specifying averaging statistic (e.g., \"median\", \"mean\"), download button tidied data.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","text":"","code":"shiny_dataUploadUI(id)"},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","text":"id Namespace ID module UI elements.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","text":"tagList containing UI output placeholders inputs averaging interval, averaging statistic, data download.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/shiny_dataUploadUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny Module UI for Data Upload and Processing — shiny_dataUploadUI","text":"","code":"if(interactive()) {   ui <- fluidPage(     shiny_dataUploadUI(\"dataUpload\")   )   server <- function(input, output, session) {     data <- shiny_dataUploadServer(\"dataUpload\")   } }"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Hanwell.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy Hanwell EMS Data — tidy_Hanwell","title":"Tidy Hanwell EMS Data — tidy_Hanwell","text":"function tidies Hanwell Environmental Monitoring System (EMS) data either Excel sheets CSV files. - Default mode (MinMax = FALSE): Reads raw date, temperature, humidity data. - Min-Max mode (MinMax = TRUE): development read min-max average data (CSV ).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Hanwell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy Hanwell EMS Data — tidy_Hanwell","text":"","code":"tidy_Hanwell(   EMS_datapath,   Site = \"Site\",   MinMax = FALSE,   sheet = \"Hanwell\",   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Hanwell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy Hanwell EMS Data — tidy_Hanwell","text":"EMS_datapath Character string specifying file path Hanwell EMS data file. Site Character string specifying site name add column. Default \"Site\". MinMax Logical flag; TRUE, reads Min-Max format, otherwise reads raw data. Default FALSE. sheet Optional, Excel sheet name reading Excel files. default \"Hanwell\" ... Additional arguments passed readxl::read_excel Excel reading.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Hanwell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy Hanwell EMS Data — tidy_Hanwell","text":"tibble containing tidied Hanwell EMS data, columns including: Site Character, site name specified Site argument. Sensor Character, sensor identifier extracted file metadata. Date POSIXct datetime measurement. Temp Numeric temperature measurement °C (average MinMax). RH Numeric relative humidity measurement % (average MinMax). TempMin, TempMax, RHMin, RHMax (MinMax reports) Numeric min/max values Temp RH.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Hanwell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy Hanwell EMS Data — tidy_Hanwell","text":"","code":"# \\donttest{ # Example usage: hanwell_data <- tidy_Hanwell(\"path/to/your/hanwell_data.csv\") # }  # mydata file filepath <- data_file_path(\"mydata.xlsx\")  tidy_Hanwell(filepath, sheet = \"Hanwell\", Site = \"London\") |> head() #> Warning: Expecting logical in D7090 / R7090C4: got 'Maximum' #> Warning: Expecting logical in E7090 / R7090C5: got 'Standard Deviation' #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> # A tibble: 6 × 5 #>   Site   Sensor   Date                 Temp    RH #>   <chr>  <chr>    <dttm>              <dbl> <dbl> #> 1 London External 2025-08-12 00:06:03  22.8  60.2 #> 2 London External 2025-08-12 00:11:00  22.6  60.2 #> 3 London External 2025-08-12 00:16:04  22.6  61.6 #> 4 London External 2025-08-12 00:21:05  22.6  62.4 #> 5 London External 2025-08-12 00:26:03  22.6  62.8 #> 6 London External 2025-08-12 00:31:07  22.4  63.5"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Meaco.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy Meaco sensor data — tidy_Meaco","title":"Tidy Meaco sensor data — tidy_Meaco","text":"function takes raw Meaco sensor data returns data renamed columns.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Meaco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy Meaco sensor data — tidy_Meaco","text":"","code":"tidy_Meaco(   mydata,   Site_col = \"RECEIVER\",   Sensor_col = \"TRANSMITTER\",   Date_col = \"DATE\",   Temp_col = \"TEMPERATURE\",   RH_col = \"HUMIDITY\" )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Meaco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy Meaco sensor data — tidy_Meaco","text":"mydata data frame containing raw Meaco sensor data columns RECEIVER, TRANSMITTER, DATE, TEMPERATURE, HUMIDITY Site_col string specifying name column `mydata` contains location information. Default \"RECEIVER\". Sensor_col string specifying name column `mydata` contains sensor information. Default \"TRANSMITTER\". Date_col string specifying name column `mydata` contains date information. Default \"DATE\". Temp_col string specifying name column `mydata` contains temperature data. Default \"TEMPERATURE\". RH_col string specifying name column `mydata` contains relative humidity data. Default \"HUMIDITY\".","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Meaco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy Meaco sensor data — tidy_Meaco","text":"tidied data frame columns Site, Sensor, Date, Temp, RH","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_Meaco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy Meaco sensor data — tidy_Meaco","text":"","code":"# \\donttest{ # Example usage: meaco_data <- tidy_Meaco(\"path/to/your/meaco_data.csv\") # }  # mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"Meaco\")  head(mydata) #> # A tibble: 6 × 5 #>   RECEIVER TRANSMITTER DATE                TEMPERATURE HUMIDITY #>   <chr>    <chr>       <dttm>                    <dbl>    <dbl> #> 1 York     Store       2024-01-01 00:03:00        18.2     54.6 #> 2 York     Store       2024-01-01 00:13:00        18.2     54.8 #> 3 York     Store       2024-01-01 00:24:00        18.1     54.8 #> 4 York     Store       2024-01-01 00:34:00        18.2     54.2 #> 5 York     Store       2024-01-01 00:45:00        18.1     53.9 #> 6 York     Store       2024-01-01 00:56:00        18.1     54.3  mydata |> tidy_Meaco() #> # A tibble: 10 × 5 #>    Site  Sensor Date                 Temp    RH #>    <chr> <chr>  <dttm>              <dbl> <dbl> #>  1 York  Store  2024-01-01 00:03:00  18.2  54.6 #>  2 York  Store  2024-01-01 00:13:00  18.2  54.8 #>  3 York  Store  2024-01-01 00:24:00  18.1  54.8 #>  4 York  Store  2024-01-01 00:34:00  18.2  54.2 #>  5 York  Store  2024-01-01 00:45:00  18.1  53.9 #>  6 York  Store  2024-01-01 00:56:00  18.1  54.3 #>  7 York  Store  2024-01-01 01:06:00  18.1  54.2 #>  8 York  Store  2024-01-01 01:17:00  18.1  54.5 #>  9 York  Store  2024-01-01 01:27:00  18.1  54.4 #> 10 York  Store  2024-01-01 01:38:00  18.0  54.2  mydata |> tidy_Meaco() |> tidy_TRHdata(avg_time = \"hour\") #> # A tibble: 2 × 5 #>   Date                Site  Sensor  Temp    RH #>   <dttm>              <chr> <chr>  <dbl> <dbl> #> 1 2024-01-01 00:00:00 York  Store   18.1  54.5 #> 2 2024-01-01 01:00:00 York  Store   18.1  54.3"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_TRHdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","title":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","text":"function tidies processes temperature, relative humidity, date data given dataset. Dataset minimally \"Date\", \"Temp\" \"RH\" columns. filters rows missing dates, attempts parse dates, converts temperature humidity numeric types, groups data Site, Sensor, Date based averaging interval. site sensor columns present data, function defaults adding columns named \"Site\" \"Sensor\". can changed arguments. averaging option \"hour\", \"day\", \"month\" selected, uses dplyr lubridate functions floor datetimes calculate averages, default median average. See lubridate::floor_date() rounding intervals. Filters rows missing dates. Renames columns consistency. Converts temperature relative humidity numeric. Adds default columns \"Site\" \"Sensor\" missing supplied args. Rounds dates nearest hour, day, month per avg_time. Calculates averages temperature relative humidity according avg_statistic. Filters implausible temperature humidity values (outside -50-80°C 0-100%RH).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_TRHdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","text":"","code":"tidy_TRHdata(   mydata,   Site = \"Site\",   Sensor = \"Sensor\",   Date = \"Date\",   Temp = \"Temp\",   RH = \"RH\",   avg_time = \"none\",   avg_statistic = \"median\",   avg_groups = c(\"Site\", \"Sensor\"),   ... )"},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_TRHdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","text":"mydata data frame containing TRH data. Ideally, columns \"Site\", \"Sensor\", \"Date\", \"Temp\" (temperature), \"RH\" (relative humidity). function requires least date, temperature, relative humidity columns present. Site sensor columns optional; missing, function add default columns named \"Site\" \"Sensor\" respectively values . Site string specifying name column mydata contains location information. missing, defaults \"Site\". Sensor string specifying name column mydata contains sensor information. missing, defaults \"Sensor\". Date string specifying name column mydata contains date information. Default \"Date\". column ideally contain ISO 8601 date-time formatted strings (e.g. \"2025-01-01 00:00:00\"), function try parse variety common datetime formats. Temp string specifying name column mydata contains temperature data. Default \"Temp\". RH string specifying name column mydata contains relative humidity data. Default \"RH\". avg_time Character string specifying averaging interval. One \"none\" (averaging), \"hour\", \"day\", \"month\", etc. See lubridate::floor_date() rounding intervals. avg_statistic Statistic averaging; default \"median\". avg_groups Character vector specifying grouping columns time-averaging. returned factors. Default c(\"Site\", \"Sensor\"). ... Additional arguments (currently unused).","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_TRHdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","text":"tidy data frame processed TRH data. averaging, date times floored, temperature humidity averaged, groups factored, implausible values filtered.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/reference/tidy_TRHdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy and Process Temperature and Relative Humidity data — tidy_TRHdata","text":"","code":"# mydata file filepath <- data_file_path(\"mydata.xlsx\") mydata <- readxl::read_excel(filepath, sheet = \"mydata\", n_max = 10)  tidy_TRHdata(mydata) #> # A tibble: 10 × 5 #>    Site   Sensor Date                 Temp    RH #>    <chr>  <chr>  <dttm>              <dbl> <dbl> #>  1 London Room 1 2024-01-01 00:00:00  21.8  36.8 #>  2 London Room 1 2024-01-01 00:15:00  21.8  36.7 #>  3 London Room 1 2024-01-01 00:29:59  21.8  36.6 #>  4 London Room 1 2024-01-01 00:44:59  21.7  36.6 #>  5 London Room 1 2024-01-01 00:59:59  21.7  36.5 #>  6 London Room 1 2024-01-01 01:14:59  21.7  36.2 #>  7 London Room 1 2024-01-01 01:29:59  21.7  36.3 #>  8 London Room 1 2024-01-01 01:44:59  21.7  36.4 #>  9 London Room 1 2024-01-01 01:59:59  21.7  36   #> 10 London Room 1 2024-01-01 02:14:59  21.6  36    tidy_TRHdata(mydata, avg_time = \"hour\") #> # A tibble: 3 × 5 #>   Date                Site   Sensor  Temp    RH #>   <dttm>              <chr>  <chr>  <dbl> <dbl> #> 1 2024-01-01 00:00:00 London Room 1  21.8  36.6 #> 2 2024-01-01 01:00:00 London Room 1  21.7  36.2 #> 3 2024-01-01 02:00:00 London Room 1  21.6  36    mydata |> add_humidity_calcs() |> tidy_TRHdata(avg_time = \"hour\") #> # A tibble: 3 × 13 #>   Date                Site   Sensor  Temp    RH   Pws    Pw    DP    AH    AD #>   <dttm>              <chr>  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 2024-01-01 00:00:00 London Room 1  21.8  36.6  26.1  9.56  6.30  7.01  1.19 #> 2 2024-01-01 01:00:00 London Room 1  21.7  36.2  26.0  9.41  6.08  6.91  1.19 #> 3 2024-01-01 02:00:00 London Room 1  21.6  36    25.8  9.29  5.89  6.82  1.19 #> # ℹ 3 more variables: MR <dbl>, SH <dbl>, Enthalpy <dbl>  # \\donttest{ # Example usage: TRH_data <- tidy_TRHdata(\"path/to/your/TRHdata.csv\") # }"},{"path":"https://bhavshah01.github.io/ConSciR/news/index.html","id":"conscir-030-development-version","dir":"Changelog","previous_headings":"","what":"ConSciR 0.3.0 (development version)","title":"ConSciR 0.3.0 (development version)","text":"Added humidity, time, adjustment functions - currently development. Added new contributors package. Modified developed graphing tidying functions. Added formulation options calcAH function. Removed ConSciR-TRHbivariate ConSciR-Psychrometric Shiny applications. Moved functions ConSciR-App: run_ConSciR_app(). Updated logo.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/news/index.html","id":"conscir-020","dir":"Changelog","previous_headings":"","what":"ConSciR 0.2.0","title":"ConSciR 0.2.0","text":"CRAN release: 2025-09-10 Added Buck equation default calcPws. Added Buck equation calcDP, calcTemp, calcRH_DP. Added Frost Point calculation calcFP - development. Correction Humidity Ratio function calcHR. Correction Air Density function calcAD. Updated Humidity functions article. Corrections resubmission.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/news/index.html","id":"conscir-011","dir":"Changelog","previous_headings":"","what":"ConSciR 0.1.1","title":"ConSciR 0.1.1","text":"Corrected DESCRIPTION file.","code":""},{"path":"https://bhavshah01.github.io/ConSciR/news/index.html","id":"conscir-010","dir":"Changelog","previous_headings":"","what":"ConSciR 0.1.0","title":"ConSciR 0.1.0","text":"Initial CRAN submission.","code":""}]
